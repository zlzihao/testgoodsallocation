<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.old.allocation.dao.StockDOMapper2" >

	<resultMap id="expressResultMap" type="cn.nome.saas.allocation.repository.old.allocation.entity.ShopExpressDO" >
		<result column="shop_id_a" property="shopIdA" />
		<result column="shop_id_b" property="shopIdB"  />
		<result column="shipping_fee" property="shippingFree"/>
		<result column="addShipping_fee" property="addShippingFree" />
		<result column="spendDays" property="shippingDays"/>
	</resultMap>

	<resultMap id="minDisplaySkcResultMap" type="cn.nome.saas.allocation.repository.old.allocation.entity.MinDisplaySkcDO">
		<result column="type" property="type" />
		<result column="type_value" property="typeValue" />
		<result column="qty" property="qty" />
	</resultMap>


	<insert id="addInStock" parameterType="java.util.List">
		insert into in_stock(TaskId,ShopID,QuotePrice,MatCode,OperationDate,SizeID,SizeName,AvgSaleAmtRank,AvgSaleAmt,AvgSaleQty,StockQty,PathStockQty,MoveQty,WarehouseStockQty,NeedStockQtyInt,SkcQty,IsComplement,IsProhibited) values
		<foreach collection="list" item="item" index="index"
			separator=","> 
			(#{item.TaskId},#{item.ShopID},#{item.QuotePrice},#{item.MatCode},#{item.OperationDate},#{item.SizeID},#{item.SizeName},#{item.AvgSaleAmtRank},#{item.AvgSaleAmt},#{item.AvgSaleQty},#{item.StockQty},#{item.PathStockQty},#{item.MoveQty},#{item.WarehouseStockQty},#{item.NeedStockQtyInt},#{item.SkcQty},#{item.IsComplement},#{item.IsProhibited})
		</foreach>
	</insert>
	
	<insert id="addOutStock" parameterType="java.util.List">
		insert into out_stock(TaskId,InShopID,ShopID,MatCode,OperationDate,SizeID,SizeName,QuotePrice,AvgSaleAmtRank,AvgSaleAmt,AvgSaleQty,StockQty,PathStockQty,WarehouseStockQty,UsableStockQty) values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.TaskId},#{item.InShopID},#{item.ShopID},#{item.MatCode},#{item.OperationDate},#{item.SizeID},#{item.SizeName},#{item.QuotePrice},#{item.AvgSaleAmtRank},#{item.AvgSaleAmt},#{item.AvgSaleQty},#{item.StockQty},#{item.PathStockQty},#{item.WarehouseStockQty},#{item.UsableStockQty})
		</foreach>
	</insert>
	
	
	<insert id="addAllocationDetail" parameterType="java.util.List">
		insert into allocation_detail(TaskId,InShopID,QuotePrice,ShopID,MatCode,SizeID,Qty,OutAvgSaleQty,OutStockQty,OutAvgSaleAmt,InMoveQty,InStockQty,InAvgSaleQty,InAvgSaleAmt,inIsComplement,InNeedStockQty) values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.TaskId},#{item.InShopID},#{item.QuotePrice},#{item.ShopID},#{item.MatCode},#{item.SizeID},#{item.Qty},#{item.OutAvgSaleQty},#{item.OutStockQty},#{item.OutAvgSaleAmt},#{item.InMoveQty},#{item.InStockQty},#{item.InAvgSaleQty},#{item.InAvgSaleAmt},#{item.InIsComplement},#{item.InNeedStockQty})
		</foreach>
	</insert>

	<select id="getMinDisplaySkcList" resultMap="minDisplaySkcResultMap">
		select type,type_value,qty from min_display_skc
	</select>

	<select id="getShopExpressList" resultMap="expressResultMap">
		select shop_id_1 AS shop_id_a, shop_id_2 AS shop_id_b,shipping_fee,addShipping_fee,spendDays
		from shop_express
		WHERE shop_id_1 in (
			<foreach collection="listA" item="shopA" index="index" separator=",">
				'${shopA}'
			</foreach>
		) and shop_id_2 in (
			<foreach collection="listB" item="shopB" index="index" separator=",">
				'${shopB}'
			</foreach>
		)
		UNION ALL
		select shop_id_1 AS shop_id_a, shop_id_2 AS shop_id_b,shipping_fee,addShipping_fee,spendDays
		from shop_express
		WHERE shop_id_1 in (
		<foreach collection="listB" item="shopB" index="index" separator=",">
			'${shopB}'
		</foreach>
		) and shop_id_2 in (
		<foreach collection="listA" item="shopA" index="index" separator=",">
			'${shopA}'
		</foreach>
		)

	</select>
	
    <select id="getInStockList" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
	  select * from in_stock where TaskId=${taskId} and IsProhibited=0
    </select>


    <select id="inStockDetailCount" resultType="Integer">
			select count(*) from in_stock a 
			left join dws_dim_goods b on a.Matcode = b.Matcode
			where a.taskId=#{req.TaskId,jdbcType=INTEGER} and a.ShopID=#{req.ShopId,jdbcType=INTEGER} and a.NeedStockQtyInt > 0
			<if test="req.CategoryCode != null" > and b.CategoryCode = #{req.CategoryCode,jdbcType=VARCHAR}</if>
			<if test="req.MidCategoryCode != null" > and b.MidCategoryCode = #{req.MidCategoryCode,jdbcType=VARCHAR}</if>
			<if test="req.SmallCategoryCode != null" > and b.SmallCategoryCode = #{req.SmallCategoryCode,jdbcType=VARCHAR}</if>
    </select>
    <select id="inStockDetailPage" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
			select b.MatName,b.CategoryName,b.MidCategoryName,b.SmallCategoryName,a.*, a.NeedStockQtyInt*a.QuotePrice as Amt 
			from in_stock a 
			left join dws_dim_goods b on a.Matcode = b.Matcode
			where a.taskId=#{req.TaskId,jdbcType=INTEGER} and a.ShopID=#{req.ShopId,jdbcType=INTEGER} and a.NeedStockQtyInt > 0
			<if test="req.CategoryCode != null" > and b.CategoryCode = #{req.CategoryCode,jdbcType=VARCHAR}</if>
			<if test="req.MidCategoryCode != null" > and b.MidCategoryCode = #{req.MidCategoryCode,jdbcType=VARCHAR}</if>
			<if test="req.SmallCategoryCode != null" > and b.SmallCategoryCode = #{req.SmallCategoryCode,jdbcType=VARCHAR}</if>
			<if test="page != null">
    				limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
    		</if>
    </select>
    
    
    <select id="inStockStatsCount" resultType="Integer">
			select count(*) from(
						select a.shopid,count(MatCode) as sku, SUM(a.NeedStockQtyInt) as NeedStockQtyInt,SUM(Amt) as TotalAmt from (
										select a.*, a.NeedStockQtyInt*a.QuotePrice as Amt 
										from in_stock a 
										left join dws_dim_goods b on a.Matcode = b.Matcode
										where 1
										<if test="req.CategoryCode != null" > and b.CategoryCode = #{req.CategoryCode,jdbcType=VARCHAR}</if>
										<if test="req.MidCategoryCode != null" > and b.MidCategoryCode = #{req.MidCategoryCode,jdbcType=VARCHAR}</if>
										<if test="req.SmallCategoryCode != null" > and b.SmallCategoryCode = #{req.SmallCategoryCode,jdbcType=VARCHAR}</if>

						) a 
						WHERE a.NeedStockQtyInt>0 and a.taskid=#{req.TaskId,jdbcType=INTEGER}
						group by a.shopid
						order by NeedStockQtyInt desc
			) a LEFT JOIN dws_dim_shop b on a.shopid = b.ShopID
			 where 1 <if test="req.CityCode != null" > and b.CityCode = #{req.CityCode,jdbcType=VARCHAR}</if>
			 		 <if test="req.ShopName != null" > and b.shopname like concat('%', #{req.ShopName}, '%')</if>
    </select>
    <select id="inStockStatsPage" resultType="cn.nome.saas.allocation.model.old.allocation.StockStat">
			select a.*,b.shopname,c.outShopidQty from(
						select a.shopid,count(MatCode) as sku, SUM(a.NeedStockQtyInt) as NeedStockQtyInt,SUM(Amt) as TotalAmt from (
										select a.*, a.NeedStockQtyInt*a.QuotePrice as Amt 
										from in_stock a 
										left join dws_dim_goods b on a.Matcode = b.Matcode
										where 1
										<if test="req.CategoryCode != null" > and b.CategoryCode = #{req.CategoryCode,jdbcType=VARCHAR}</if>
										<if test="req.MidCategoryCode != null" > and b.MidCategoryCode = #{req.MidCategoryCode,jdbcType=VARCHAR}</if>
										<if test="req.SmallCategoryCode != null" > and b.SmallCategoryCode = #{req.SmallCategoryCode,jdbcType=VARCHAR}</if>

						) a 
						WHERE a.NeedStockQtyInt>0 and a.taskid=#{req.TaskId,jdbcType=INTEGER}
						group by a.shopid
						order by NeedStockQtyInt desc
			) a LEFT JOIN dws_dim_shop b on a.shopid = b.ShopID
				LEFT JOIN (
							select a.inshopid,count(DISTINCT(a.shopid)) as outShopidQty from out_stock a
							left join dws_dim_goods b on a.Matcode = b.Matcode
							where a.taskid=#{req.TaskId,jdbcType=INTEGER}
							<if test="req.CategoryCode != null" > and b.CategoryCode = #{req.CategoryCode,jdbcType=VARCHAR}</if>
							<if test="req.MidCategoryCode != null" > and b.MidCategoryCode = #{req.MidCategoryCode,jdbcType=VARCHAR}</if>
							<if test="req.SmallCategoryCode != null" > and b.SmallCategoryCode = #{req.SmallCategoryCode,jdbcType=VARCHAR}</if>
							GROUP BY a.InShopID
				) c on a.shopid = c.InShopID
			 where 1 <if test="req.CityCode != null" > and b.CityCode = #{req.CityCode,jdbcType=VARCHAR}</if>
			 		 <if test="req.ShopName != null" > and b.shopname like concat('%', #{req.ShopName}, '%')</if>
			 order by a.TotalAmt desc
			 <if test="page != null">
    				limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
    		 </if>
    </select>


    <select id="outStockStatsCount" resultType="Integer">
			select count(*) from(
					select aa.inshopid,aa.shopid, count(distinct(aa.MatCode)) as sku,SUM(aa.AvgSaleQty) as AvgSaleQty,SUM(aa.AvgSaleAmt) as AvgSaleAmt, SUM(aa.QuotePrice*aa.CanUseStockQtyInt) as  ContributeAmt,SUM(aa.NeedStockQtyInt) as NeedStockQtyInt,SUM(aa.UsableStockQty) as UsableStockQty from (
							SELECT aaa.*,CASE WHEN aaa.UsableStockQty > aaa.NeedStockQtyInt THEN aaa.NeedStockQtyInt ELSE aaa.UsableStockQty END CanUseStockQtyInt from (
												select b.AvgSaleAmt,b.AvgSaleQty,a.NeedStockQtyInt,a.matcode,a.sizeid,b.QuotePrice,b.shopid,b.inshopid,ceiling(b.UsableStockQty) as UsableStockQty
												from out_stock b
												left join in_stock a on a.shopid=b.inshopid and a.Matcode=b.Matcode and a.sizeid=b.sizeid
												inner join dws_dim_goods c on b.Matcode = c.Matcode
												where 1 and b.inshopid=#{req.InShopId,jdbcType=VARCHAR} and b.UsableStockQty>0 and b.taskid=#{req.TaskId,jdbcType=INTEGER}
														<if test="req.CategoryCode != null" > and c.CategoryCode = #{req.CategoryCode,jdbcType=VARCHAR}</if>
														<if test="req.MidCategoryCode != null" > and c.MidCategoryCode = #{req.MidCategoryCode,jdbcType=VARCHAR}</if>
														<if test="req.SmallCategoryCode != null" > and c.SmallCategoryCode = #{req.SmallCategoryCode,jdbcType=VARCHAR}</if>
							) aaa
					) aa group by aa.shopid
			) a
    </select>
    <select id="outStockStatsPage" resultType="cn.nome.saas.allocation.model.old.allocation.StockStat">
			select a.*,b.shopname from(
					select aa.inshopid,aa.shopid, count(distinct(aa.MatCode)) as sku,SUM(aa.AvgSaleQty) as AvgSaleQty,SUM(aa.AvgSaleAmt) as AvgSaleAmt, SUM(aa.QuotePrice*aa.CanUseStockQtyInt) as  ContributeAmt,SUM(aa.NeedStockQtyInt) as NeedStockQtyInt,SUM(aa.UsableStockQty) as UsableStockQty from (
							SELECT aaa.*,CASE WHEN aaa.UsableStockQty > aaa.NeedStockQtyInt THEN aaa.NeedStockQtyInt ELSE aaa.UsableStockQty END CanUseStockQtyInt from (
												select b.AvgSaleAmt,b.AvgSaleQty,a.NeedStockQtyInt,a.matcode,a.sizeid,b.QuotePrice,b.shopid,b.inshopid,ceiling(b.UsableStockQty) as UsableStockQty
												from out_stock b
												left join in_stock a on a.shopid=b.inshopid and a.Matcode=b.Matcode and a.sizeid=b.sizeid
												inner join dws_dim_goods c on b.Matcode = c.Matcode
												where 1 and b.inshopid=#{req.InShopId,jdbcType=VARCHAR} and b.UsableStockQty>0 and b.taskid=#{req.TaskId,jdbcType=INTEGER}
														<if test="req.CategoryCode != null" > and c.CategoryCode = #{req.CategoryCode,jdbcType=VARCHAR}</if>
														<if test="req.MidCategoryCode != null" > and c.MidCategoryCode = #{req.MidCategoryCode,jdbcType=VARCHAR}</if>
														<if test="req.SmallCategoryCode != null" > and c.SmallCategoryCode = #{req.SmallCategoryCode,jdbcType=VARCHAR}</if>
							) aaa
					) aa group by aa.shopid
			) a LEFT JOIN dws_dim_shop b on a.shopid = b.ShopID
			WHERE 1 order by ContributeAmt desc
			<if test="page != null">
    				limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
    		</if>
    </select>
    
    <select id="getInStockStats" resultType="cn.nome.saas.allocation.model.old.allocation.StockStat">
		select a.shopid, SUM(a.NeedStockQtyInt) as NeedStockQtyInt,SUM(Amt) as TotalAmt from (
		select *, NeedStockQtyInt*QuotePrice as Amt from in_stock where TaskId=${taskId} and IsProhibited=0
		) a 
		WHERE a.NeedStockQtyInt>0 group by a.shopid order by TotalAmt desc
    </select>
    <select id="getOutStockStats" resultType="cn.nome.saas.allocation.model.old.allocation.StockStat">
		select aa.inshopid,aa.shopid, SUM(aa.QuotePrice*aa.CanUseStockQtyInt) as  ContributeAmt,SUM(aa.NeedStockQtyInt) as NeedStockQtyInt,SUM(aa.UsableStockQty) as UsableStockQty from (
				SELECT aaa.*,CASE WHEN aaa.UsableStockQty-aaa.HaveUsedQty > aaa.NeedStockQtyInt THEN aaa.NeedStockQtyInt ELSE aaa.UsableStockQty-aaa.HaveUsedQty END CanUseStockQtyInt from (
							  select a.matcode,a.NeedStockQtyInt,a.sizeid,b.QuotePrice,b.shopid,b.inshopid,CASE WHEN c.qty is null THEN 0 ELSE c.qty END HaveUsedQty,ceiling(b.UsableStockQty) as UsableStockQty
							  from in_stock a 
							  left join out_stock b on a.taskid=b.taskid and a.shopid=b.inshopid and a.Matcode=b.Matcode and a.sizeid=b.sizeid
							  left join (
									select TaskId,shopid,matcode,sizeid,sum(qty) as qty from allocation_detail where TaskId=${taskId} group by shopid,matcode,sizeid
								) c on b.TaskId=c.TaskId and b.shopid=c.shopid and b.matcode=c.matcode and b.sizeid=c.sizeid
							  where a.shopid='${shopId}' and a.TaskId=${taskId} and a.IsProhibited=0
				) aaa
		) aa WHERE aa.UsableStockQty>0 group by aa.shopid  order by ContributeAmt desc
    </select>
    
    <select id="getInStockListByShopId" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
	  select * from(
		select *,needstockqtyint as RawNeedStockQtyInt from in_stock WHERE shopid='${shopId}' and TaskId=${taskId} and IsProhibited=0
	  ) a where a.NeedStockQtyInt > 0
    </select>
    <select id="getOutStockListByShopId" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
		select * from(
			  select a.*,b.qty,CASE WHEN b.qty is null THEN a.UsableStockQtyInt1 ELSE (a.UsableStockQtyInt1-b.qty) END UsableStockQtyInt from(
					select *,floor(UsableStockQty) as UsableStockQtyInt1 from out_stock WHERE InShopID='${shopId}' and TaskId=${taskId}
			  ) a LEFT JOIN (
					select shopid,matcode,sizeid,sum(qty) as qty from allocation_detail where TaskId=${taskId} group by shopid,matcode,sizeid
			  ) b on a.shopid=b.shopid and a.matcode=b.matcode and a.sizeid=b.sizeid
		) res where res.UsableStockQtyInt > 0
    </select>
    
	<select id="getGoodsPrice" resultType="cn.nome.saas.allocation.model.old.allocation.Goods" parameterType="java.lang.String">
	  	select MatCode,QuotePrice,SeasonName,YearNo,CategoryName,MidCategoryName,SmallCategoryName from dws_dim_goods where MatCode in(
			<foreach collection="list" item="item" index="index" separator=","> 
				'${item}'
			</foreach>
	  	)
	</select>
    
    <select id="getMidCategory" resultType="cn.nome.saas.allocation.model.old.allocation.Category">
		SELECT DISTINCT(MidCategoryCode) as CategoryCode,MidCategoryName as CategoryName from dws_dim_goods where MatCode in(SELECT DISTINCT(MatCode) from in_stock where TaskId = ${taskId}) and ${typeSql}
    </select>
    <select id="getSmallCategory" resultType="cn.nome.saas.allocation.model.old.allocation.Category">
		SELECT DISTINCT(SmallCategoryCode) as CategoryCode,SmallCategoryName as CategoryName from dws_dim_goods where MidCategoryCode='${midCategoryCode}' and MatCode in(SELECT DISTINCT(MatCode) from in_stock where TaskId = ${taskId}) and ${typeSql}
    </select>
    
    
    <select id="getTaskProgress" resultType="cn.nome.saas.allocation.model.old.allocation.TaskProgress">
	  select *,created_at as createdTime,task_id as taskId from task_progress where task_id=${taskId} order by created_at asc
    </select>

    <select id="getSeasonList" resultType="cn.nome.saas.allocation.model.old.allocation.Paramater">
		SELECT DISTINCT(SeasonNO) as 'key',SeasonName as 'value' from dws_dim_goods
    </select>
    <select id="getYearNoList" resultType="cn.nome.saas.allocation.model.old.allocation.Paramater">
		SELECT DISTINCT(YearNo) as 'key',YearNo as 'value' from dws_dim_goods
    </select>
    <select id="getShopList" resultType="cn.nome.saas.allocation.model.old.allocation.Shop">
		select ShopID as shopId,ShopName as shopName,ProvinceCode as provinceCode,ProvinceName as provinceName,CityCode as cityCode,CityName as cityName from dws_dim_shop
    </select>
    
	<select id="getProhibitedGoodsList" resultType="cn.nome.saas.allocation.model.old.allocation.ProhibitedGoods">
	  <![CDATA[
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from forbidden_single_rule a left join goods_info b on a.type_value=b.CategoryName where a.type=1 and a.start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and a.end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d')
	  ]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
		<![CDATA[
			UNION
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from forbidden_single_rule a left join goods_info b on a.type_value=b.MidCategoryName where a.type=2 and a.start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and a.end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d')
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from forbidden_single_rule a left join goods_info b on a.type_value=b.SmallCategoryName where a.type=3 and a.start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and a.end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d')
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,a.type_value as matcode, rule_name as ruleName from forbidden_single_rule a where a.type=4 and a.start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and a.end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d')
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
	</select>

	<select id="getProhibitedGoodsListByDate" resultType="cn.nome.saas.allocation.model.old.allocation.ProhibitedGoods">
	  <![CDATA[
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from forbidden_single_rule a left join goods_info b on a.type_value=b.CategoryName where a.type=1 and a.start_date<=#{date} and a.end_date >=#{date}
	  ]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
		<![CDATA[
			UNION
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from forbidden_single_rule a left join goods_info b on a.type_value=b.MidCategoryName where a.type=2 and a.start_date<=#{date} and a.end_date >=#{date}
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from forbidden_single_rule a left join goods_info b on a.type_value=b.SmallCategoryName where a.type=3 and a.start_date<=#{date} and a.end_date >=#{date}
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,a.type_value as matcode, rule_name as ruleName from forbidden_single_rule a where a.type=4 and a.start_date<=#{date} and a.end_date >=#{date}
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
	</select>

	<select id="getWhiteGoodsList" resultType="cn.nome.saas.allocation.model.old.allocation.ProhibitedGoods">
	  <![CDATA[
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from white_list_single_rule a left join goods_info b on a.type_value=b.CategoryName where a.type=1 and a.start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and a.end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d')
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from white_list_single_rule a left join goods_info b on a.type_value=b.MidCategoryName where a.type=2 and a.start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and a.end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d')
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from white_list_single_rule a left join goods_info b on a.type_value=b.SmallCategoryName where a.type=3 and a.start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and a.end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d')
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,a.type_value as matcode, rule_name as ruleName from white_list_single_rule a where a.type=4 and a.start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and a.end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d')
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
			<![CDATA[
			UNION
			SELECT b.shop_id as shopId,CONCAT(a.mat_code, "_", a.size_id) as matcode, "新品铺货范围禁配" as ruleName from new_goods_issue_range a left join new_goods_issue_range_detail b on a.id = b.range_id and b.plan_flag = 0 where a.issue_fin=0 and a.invalid_at >=DATE_FORMAT(NOW(),'%Y-%m-%d')
			]]>
	</select>

	<select id="getWhiteGoodsListByDate" resultType="cn.nome.saas.allocation.model.old.allocation.ProhibitedGoods">
	  <![CDATA[
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from white_list_single_rule a left join goods_info b on a.type_value=b.CategoryName where a.type=1 and a.start_date<=#{date} and a.end_date >=#{date}
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from white_list_single_rule a left join goods_info b on a.type_value=b.MidCategoryName where a.type=2 and a.start_date<=#{date} and a.end_date >=#{date}
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,b.MatCode as matcode, rule_name as ruleName from white_list_single_rule a left join goods_info b on a.type_value=b.SmallCategoryName where a.type=3 and a.start_date<=#{date} and a.end_date >=#{date}
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
        	<![CDATA[
			UNION
			SELECT a.shop_id as shopId,a.type_value as matcode, rule_name as ruleName from white_list_single_rule a where a.type=4 and a.start_date<=#{date} and a.end_date >=#{date}
			]]>
			<if test="shopIds != null">
				<foreach collection="shopIds" open="and a.shop_id in ("  close=")" separator="," item="shopId">
					#{shopId}
				</foreach>
        	</if>
	</select>

	<select id="getSecurityList" resultType="cn.nome.saas.allocation.model.old.allocation.ProhibitedGoods">
		<![CDATA[
			select rule_name as ruleName, shop_id as shopId, type_value as matcode, max(num) as minQty from security_single_rule where start_date<=DATE_FORMAT(NOW(),'%Y-%m-%d') and end_date >=DATE_FORMAT(NOW(),'%Y-%m-%d') group by type_value, shop_id
		]]>
	</select>

	<select id="getSecurityListByDate" resultType="cn.nome.saas.allocation.model.old.allocation.ProhibitedGoods">
		<![CDATA[
			select rule_name as ruleName, shop_id as shopId, type_value as matcode, max(num) as minQty from security_single_rule where start_date<=#{date} and end_date >=#{date} group by type_value, shop_id
		]]>
	</select>
	<select id="getMatCodeBySmallCategory" resultType="java.util.Map">
		select SmallCategoryName,MatCode from goods_info
		where SmallCategoryName IN (
		<foreach collection="list" item="item" index="index" separator=",">
			'${item}'
		</foreach>
		)
	</select>


	<!--<update id="updateProhibitedGoods">-->
	  			<!--UPDATE in_stock set IsProhibited=1 where TaskId=${taskId} and shopid='${shopId}' and MatCode in (-->
	  					<!--<foreach collection="list" item="item" index="index" separator=","> -->
							<!--#{item}-->
						<!--</foreach>-->
	  			<!--)-->
	<!--</update>-->
</mapper>