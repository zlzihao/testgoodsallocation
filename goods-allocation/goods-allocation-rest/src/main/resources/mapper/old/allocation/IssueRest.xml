<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.old.allocation.dao.IssueRestDOMapper2" >

	<select id="getRegioneBusNameList" resultType="java.lang.String">
	  <![CDATA[
			SELECT DISTINCT(regioneBusName) as regioneBusName from dws_dim_shop where regioneBusName is not null
	  ]]>
	</select>

	<select id="getSubRegioneBusNameList" resultType="java.lang.String">
	  <![CDATA[
			SELECT DISTINCT(subRegioneBusName) as subRegioneBusName from dws_dim_shop where regioneBusName='${regioneBusName}'
	  ]]>
	</select>
	<select id="getAllSubRegioneBusNames" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT(subRegioneBusName) as subRegioneBusName from dws_dim_shop where regioneBusName IS NOT NULL
	  ]]>
	</select>

	<select id="getCityList" resultType="cn.nome.saas.allocation.model.old.allocation.Area">
		<![CDATA[
			SELECT DISTINCT(CityCode) as area_code,CityName as area_name from dws_dim_shop where subRegioneBusName='${subRegioneBusName}'
	  ]]>
	</select>

	<select id="getAllCitys" resultType="cn.nome.saas.allocation.model.old.allocation.Area">
		<![CDATA[
			SELECT DISTINCT(CityCode) as area_code,CityName as area_name from dws_dim_shop where CityName IS NOT NULL
	  ]]>
	</select>

	<select id="getDictionaryList" resultType="cn.nome.saas.allocation.model.old.allocation.Dictionary">
		<![CDATA[
			SELECT type,para_key as paraKey,para_value as paraValue from dictionary
	  ]]>
	</select>

	<select id="getDictionaryByType" resultType="cn.nome.saas.allocation.model.old.allocation.Dictionary">
		<![CDATA[
			SELECT type,para_key as paraKey,para_value as paraValue from dictionary WHERE type = #{type}
	  ]]>
	</select>

	<select id="getOrderList" resultType="cn.nome.saas.allocation.model.old.issue.OrderListDo">
		SELECT isd.ShopID shopId,ist.created_at createdAt,isd.PackageQty packageQty,isd.PackageVal packageVal,
		dds.ShopName shopName,dds.RegioneBusName regioneName,dds.SubRegioneBusName subRegoneName,dds.CityName cityName,
		si.IssueTime issueTime,si.RoadDay onRoadDay,rc.recalcId,rc.recalcTime,rc.percent,rc.status
		FROM (
		SELECT InShopID as ShopID,TaskId,sum(OrderPackage * MinPackageQty) as PackageQty,sum(OrderPackage * MinPackageQty *
		QuotePrice) as PackageVal FROM issue_detail
		WHERE TaskId = #{orderListParam.taskId} AND Status = 0
		<if test="orderListParam.shopIds != null and orderListParam.shopIds.size > 0">
			AND InShopID IN
			<foreach collection="orderListParam.shopIds" item="shopId" index="index"
					 open="(" close=")" separator=",">
				#{shopId}
			</foreach>
		</if>
		<if test="orderListParam.createdBegin != null and orderListParam.createdEnd != null">
			AND CreatedAt BETWEEN #{orderListParam.createdBegin} AND #{orderListParam.createdEnd}
		</if>
		group by ShopID,TaskId
		) isd
		LEFT JOIN issue_task ist ON isd.TaskId = ist.id
		LEFT JOIN dws_dim_shop dds ON isd.ShopID = dds.ShopID
		LEFT JOIN shop_info si ON isd.ShopID = si.ShopID
		LEFT JOIN (
		SELECT id recalcId,shop_id shopId,updated_at recalcTime,task_id taskId,task_percent percent,task_status status
		FROM issue_recale_task WHERE id IN (SELECT MAX(id) FROM issue_recale_task
		WHERE task_id = #{orderListParam.taskId} AND task_status IN (0,1,2) AND TO_DAYS(created_at) = TO_DAYS(NOW()) GROUP BY task_id,shop_id)
		) rc ON  isd.ShopID = rc.shopId AND isd.TaskId = rc.taskId
		WHERE 1 = 1
		<if test="orderListParam.shopName != null">
			AND ShopName like concat('%', #{orderListParam.shopName}, '%')
		</if>
		<if test="orderListParam.regioneName != null">
			AND RegioneBusName = #{orderListParam.regioneName}
		</if>
		<if test="orderListParam.subRegoneName != null">
			AND SubRegioneBusName = #{orderListParam.subRegoneName}
		</if>
		<if test="orderListParam.cityName != null">
			AND CityName = #{orderListParam.cityName}
		</if>
		<if test="orderListParam.userName != null">
			AND si.UserName = #{orderListParam.userName}
		</if>
		<if test="orderListParam.issueTime != null">
			AND si.IssueTime IN
			<foreach collection="orderListParam.issueTime" item="item" index="index"
					 open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		ORDER BY isd.ShopID
		<if test="orderListParam.pageSize != null and orderListParam.offset != null">
			limit #{orderListParam.pageSize} offset #{orderListParam.offset}
		</if>
	</select>

	<select id="getOrderListCount" resultType="Integer">
		SELECT COUNT(*)
		FROM (
		select InShopID as ShopID,TaskId from issue_detail where TaskId = #{orderListParam.taskId} AND Status = 0
		<if test="orderListParam.shopIds != null and orderListParam.shopIds.size > 0">
			AND InShopID IN
			<foreach collection="orderListParam.shopIds" item="shopId" index="index"
					 open="(" close=")" separator=",">
				#{shopId}
			</foreach>
		</if>
		<if test="orderListParam.createdBegin != null and orderListParam.createdEnd != null">
			AND CreatedAt BETWEEN #{orderListParam.createdBegin} AND #{orderListParam.createdEnd}
		</if>
		group by ShopID,TaskId
		) isd
		LEFT JOIN issue_task ist ON isd.TaskId = ist.id
		LEFT JOIN dws_dim_shop dds ON isd.ShopID = dds.ShopID
		LEFT JOIN shop_info si ON isd.ShopID = si.ShopID
		WHERE 1 = 1
		<if test="orderListParam.shopName != null">
			AND ShopName like concat('%', #{orderListParam.shopName}, '%')
		</if>
		<if test="orderListParam.regioneName != null">
			AND RegioneBusName = #{orderListParam.regioneName}
		</if>
		<if test="orderListParam.subRegoneName != null">
			AND SubRegioneBusName = #{orderListParam.subRegoneName}
		</if>
		<if test="orderListParam.cityName != null">
			AND CityName = #{orderListParam.cityName}
		</if>
		<if test="orderListParam.userName != null">
			AND si.UserName = #{orderListParam.userName}
		</if>
		<if test="orderListParam.issueTime != null">
			AND si.IssueTime IN
			<foreach collection="orderListParam.issueTime" item="item" index="index"
					 open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
	</select>

	<select id="getLastTask" resultType="cn.nome.saas.allocation.model.old.issue.IssueTaskVo">
		SELECT id taskId,run_time runTime FROM issue_task WHERE task_status = 1 ORDER BY id DESC LIMIT 1
	</select>

	<select id="getLastReRunTask" resultType="cn.nome.saas.allocation.model.old.issue.IssueTaskVo">
		SELECT id taskId,run_time runTime FROM issue_task WHERE task_status = 2  AND created_at > SUBDATE(NOW(),INTERVAL 5 HOUR) ORDER BY id DESC LIMIT 1
	</select>

	<select id="getIssueTask" resultType="cn.nome.saas.allocation.model.old.allocation.IssueTask">
		SELECT task_status taskStatus,created_at createdAt,id,name,run_time runTime FROM issue_task WHERE id = #{taskId}
	</select>

	<select id="getOrderDetail" resultType="cn.nome.saas.allocation.model.old.issue.OrderDetailDo">
		SELECT
		isd.TaskId taskId,isd.InShopID shopId,isd.PackageQty packageQty,isd.OrderPackage orderPackage
		,isd.MatCode matCode,isd.MatName matName,isd.QuotePrice quotePrice,isd.SizeID sizeId,isd.SizeName sizeName
		,isd.CategoryName categoryName,isd.MidCategoryName midCategoryName,isd.SmallCategoryName smallCategoryName
		,isd.MinPackageQty minPackageQty,isd.PercentCategory
		,ios.StockQty outStockQty
		FROM issue_detail isd
		LEFT JOIN issue_out_stock ios ON isd.MatCode = ios.MatCode AND isd.TaskId = ios.TaskId AND isd.SizeID = ios.SizeID
		WHERE isd.InShopID = #{detailParam.shopId} AND isd.TaskId = #{detailParam.taskId} AND isd.Status = 0
		<if test="detailParam.categoryName != null">
			AND isd.CategoryName = #{detailParam.categoryName}
		</if>
		<if test="detailParam.midCategoryName != null">
			AND isd.MidCategoryName = #{detailParam.midCategoryName}
		</if>
		<if test="detailParam.smallCategoryName != null">
			AND isd.SmallCategoryName = #{detailParam.smallCategoryName}
		</if>
		<!--
		<if test="detailParam.pageSize != null and detailParam.offset != null">
			limit #{detailParam.pageSize} offset #{detailParam.offset}
		</if>
		-->
	</select>

	<select id="getOrderByIds" resultType="cn.nome.saas.allocation.model.old.issue.OrderListDo">
		SELECT isd.ShopID shopId,ist.created_at createdAt,isd.PackageQty packageQty,isd.PackageVal packageVal,
		dds.ShopName shopName,dds.RegioneBusName regioneName,dds.SubRegioneBusName subRegoneName,dds.CityName cityName,
		si.IssueTime issueTime,si.RoadDay onRoadDay,rc.recalcId,rc.recalcTime,rc.percent,rc.status
		FROM (
		SELECT InShopID as ShopID,TaskId,sum(OrderPackage * MinPackageQty) as PackageQty,sum(OrderPackage * MinPackageQty *
		QuotePrice) as PackageVal FROM issue_detail
		WHERE TaskId = #{taskId} AND Status = 0
		AND InShopID IN
		<foreach collection="shopIds" item="shopId" index="index"
				 open="(" close=")" separator=",">
			#{shopId}
		</foreach>
		group by ShopID,TaskId
		) isd
		LEFT JOIN issue_task ist ON isd.TaskId = ist.id
		LEFT JOIN dws_dim_shop dds ON isd.ShopID = dds.ShopID
		LEFT JOIN shop_info si ON isd.ShopID = si.ShopID
		LEFT JOIN (
		SELECT id recalcId,shop_id shopId,updated_at recalcTime,task_id taskId,task_percent percent,task_status status
		FROM issue_recale_task WHERE id IN (
		SELECT MAX(id) FROM issue_recale_task
		WHERE task_id = #{taskId} AND task_status IN (0,2) AND TO_DAYS(created_at) = TO_DAYS(NOW()) GROUP BY task_id,shop_id
		)
		) rc ON  isd.ShopID = rc.shopId AND isd.TaskId = rc.taskId
	</select>

	<select id="getShopById" resultType="cn.nome.saas.allocation.model.old.issue.ShopInDo">
		SELECT a.ShopName,a.ShopID, b.IssueDay,b.SafeDay FROM dws_dim_shop a left join shop_info b on a.ShopID = b.ShopID WHERE a.ShopID = #{shopId}
	</select>

	<select id="getShopIdByUserId" resultType="String">
		SELECT ShopID FROM shop_info WHERE UserId = #{userId}
	</select>

	<select id="getMatCategoryDetail" resultType="cn.nome.saas.allocation.model.old.issue.MatCategoryDetailDo">

		SELECT g.CategoryName categoryName,isd.orderAmt,mc.needQty,isd.orderQty,g.avgSaleQty,dy.displayDepth,sddv.displayQty,sddv.displayPercent,g.moveQty,g.pathStockQty,g.stockQty,
		icd.NewSkcCount,icd.ProhibitedSkcCount,icd.ValidSkcCount,icd.KeepSkcCount,icd.CanSkcCount
		FROM (
		SELECT CategoryName,sum(AvgSaleQty) avgSaleQty,sum(MoveQty) moveQty,sum(PathStockQty) pathStockQty,sum(StockQty) stockQty
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE TaskId=#{taskId} and shopid=#{shopId} AND iis.Status = 0
		<if test="categoryName != null">
			AND CategoryName = #{categoryName}
		</if>
		AND CategoryName IS NOT NULL
		GROUP BY CategoryName
		) g
		LEFT JOIN
		(
		SELECT CategoryName,SUM(OrderPackage * MinPackageQty) orderQty,SUM(OrderPackage * MinPackageQty * QuotePrice) orderAmt
		FROM issue_detail
		WHERE TaskId=#{taskId} AND InShopID = #{shopId} AND Status = 0
		GROUP BY CategoryName
		) isd ON g.CategoryName = isd.CategoryName
		LEFT JOIN (
		SELECT CategoryName ,SUM(NeedQty) needQty
		FROM issue_mid_category_qty
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 0 GROUP BY CategoryName
		) mc ON g.CategoryName = mc.CategoryName
		LEFT JOIN (
		SELECT CategoryName ,SUM(displaydepth) displayDepth
		FROM display_v GROUP BY CategoryName
		) dy ON g.CategoryName = dy.CategoryName
		LEFT JOIN (
		SELECT CategoryName ,SUM(display_qty) displayQty,max(DisplayPercent) displayPercent
		FROM shop_display_design_v WHERE shopid = #{shopId}
		GROUP BY CategoryName
		) sddv ON sddv.CategoryName = g.CategoryName
		LEFT JOIN (
		SELECT CategoryName,NewSkcCount,ProhibitedSkcCount,ValidSkcCount,KeepSkcCount,CanSkcCount FROM issue_category_data
		WHERE ShopID = #{shopId} AND TaskId = #{taskId} AND Status = 0
		) icd ON icd.CategoryName = g.CategoryName

	</select>

	<select id="getMatMidCategoryDetail" resultType="cn.nome.saas.allocation.model.old.issue.MatCategoryDetailDo">

		SELECT g.MidCategoryName categoryName,isd.orderAmt,mc.needQty,g.avgSaleQty,isd.orderQty,dy.displayDepth,sddv.displayQty,sddv.displayPercent,g.moveQty,g.pathStockQty,g.stockQty,icd.NewSkcCount,icd.ProhibitedSkcCount,icd.ValidSkcCount,icd.KeepSkcCount,icd.CanSkcCount
		FROM (
		SELECT CategoryName,MidCategoryName,sum(AvgSaleQty) avgSaleQty,sum(MoveQty) moveQty,sum(PathStockQty) pathStockQty,sum(StockQty) stockQty
		FROM issue_in_stock iis LEFT JOIN goods_info gi ON iis.MatCode = gi.MatCode
		WHERE TaskId= #{taskId} and shopid= #{shopId} AND iis.Status = 0
		AND CategoryName = #{categoryName}
		GROUP BY MidCategoryName
		) g
		LEFT JOIN
		(
		SELECT CategoryName,MidCategoryName,SUM(OrderPackage * MinPackageQty) orderQty,SUM(OrderPackage * MinPackageQty * QuotePrice) orderAmt
		FROM issue_detail
		WHERE TaskId= #{taskId} AND InShopID = #{shopId} AND Status = 0
		AND CategoryName = #{categoryName}
		GROUP BY MidCategoryName
		) isd
		ON g.CategoryName = isd.CategoryName AND g.MidCategoryName = isd.MidCategoryName
		LEFT JOIN (
		SELECT MidCategoryName ,SUM(NeedQty) needQty
		FROM issue_mid_category_qty
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND CategoryName = #{categoryName} AND Status = 0 GROUP BY MidCategoryName
		) mc ON g.MidCategoryName = mc.MidCategoryName
		LEFT JOIN (
		SELECT MidCategoryName ,SUM(displaydepth) displayDepth
		FROM display_v
		WHERE CategoryName = #{categoryName} GROUP BY MidCategoryName
		) dy ON g.MidCategoryName = dy.MidCategoryName
		LEFT JOIN (
		SELECT MidCategoryName ,SUM(display_qty) displayQty,max(DisplayPercent) displayPercent
		FROM shop_display_design_v
		WHERE shopid = #{shopId} AND CategoryName = #{categoryName} GROUP BY MidCategoryName
		) sddv ON sddv.MidCategoryName = g.MidCategoryName
		LEFT JOIN (
		SELECT NewSkcCount,ProhibitedSkcCount,ValidSkcCount,KeepSkcCount,CanSkcCount,MidCategoryName FROM issue_midcategory_data
		WHERE ShopID = #{shopId} AND CategoryName = #{categoryName} AND TaskId = #{taskId} AND Status = 0
		) icd ON g.MidCategoryName = icd.MidCategoryName

	</select>

	<select id="getAllMidCategory" resultType="String">
		SELECT DISTINCT MidCategoryName FROM goods_info WHERE CategoryName = #{categoryName} AND MidCategoryName IS NOT NULL
	</select>

	<select id="getTotalOutStock" resultType="Integer">
		SELECT IFNULL(SUM(StockQty),0) FROM issue_out_stock WHERE TaskId = #{taskId} AND MatCode = #{matCode} AND SizeID = #{sizeId}
	</select>

	<select id="otherShopStockQty" resultType="Integer">
		select IFNULL(SUM(MinPackageQty * OrderPackage),0) from issue_detail
		WHERE TaskId = #{taskId} AND MatCode = #{matCode} AND SizeID = #{sizeId} AND Status = 0 AND InShopID NOT IN (#{shopId})
	</select>

	<select id="getGoodsInfo" resultType="cn.nome.saas.allocation.model.old.issue.GoodsInfoDo">
		SELECT MatCode,MatId,MinPackageQty FROM goods_info WHERE MatCode = #{matCode}
	</select>

	<update id="modifySkuPackageQty" parameterType="cn.nome.saas.allocation.model.old.issue.OrderSkuModifyParam">
		update issue_detail
		<set>
			OrderPackage = #{param.count},UpdatedAt = now()
		</set>
		WHERE TaskId = #{param.taskId} AND InShopID = #{param.shopId} AND MatCode = #{param.matCode} AND SizeID = #{param.sizeId} AND Status = 0
	</update>

	<select id="getDetail" resultType="cn.nome.saas.allocation.model.old.issue.IssueDetailDo">
		SELECT TaskId,InShopID,MatCode,SizeID,Qty,PackageQty,QuotePrice,OrderPackage,MinPackageQty FROM issue_detail
		WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND MatCode = #{matCode} AND SizeID = #{sizeId} AND Status = 0
	</select>

	<select id="getIssueInStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueInStockDo">
		SELECT AvgSaleQty,StockQty,TotalStockQty FROM issue_in_stock
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND MatCode = #{matCode} AND SizeID = #{sizeId} AND Status = 0
	</select>

	<select id="getAdmin" resultType="cn.nome.saas.allocation.model.old.issue.UserAdminDo">
		SELECT UserId userId,userName FROM `user_admin` WHERE UserId = #{userId}
	</select>

	<select id="displayData" resultType="cn.nome.saas.allocation.model.old.issue.DisplayData">
		SELECT CategoryName,MidCategoryName,SmallCategoryName,MidDisplayDepth,DisplayDepth,Columns,Rows,Depth,QtyWeight FROM display
	</select>

	<select id="goodsInfoData" resultType="cn.nome.saas.allocation.model.old.issue.GoodsInfoData">
		SELECT MatId,MatCode,MatName,CategoryName,MidCategoryName,SmallCategoryName,MinPackageQty,area,`level`,IsAllocationProhibited as prohibited FROM goods_info
	</select>

	<select id="shopInfoData" resultType="cn.nome.saas.allocation.model.old.issue.ShopInfoData">
		SELECT ShopID,ShopCode,UserId,GoodsArea,UserName,IssueTime,ShopLevel,HaveChild,WomenLevel,MenLevel,CommodityLevel,RoadDay FROM shop_info
	</select>

	<select id="shopDisplayData" resultType="cn.nome.saas.allocation.model.old.issue.ShopDisplayData">
		SELECT ShopId,ShopCode,CategoryName,MidCategoryName,DisplayPercent,Display_Qty FROM shop_display_design
	</select>

	<select id="showTableExists" resultType="java.util.Map">
		show tables like #{tableName}
	</select>

	<update id="truncateTable">
		TRUNCATE TABLE ${tableName}
	</update>

	<update id="createAndCopyTab">
		create table ${batTableName} as select * from ${tableName}
	</update>

	<insert id="selectAndInsert">
		INSERT INTO ${batTableName} SELECT * FROM ${tableName}
	</insert>

	<select id="getShopIdByCode" resultType="cn.nome.saas.allocation.model.old.issue.DwsDimShopDo">
		SELECT ShopID,ShopCode FROM dws_dim_shop s
		WHERE ShopCode IN
		<foreach collection="shopCodes" item="shopCode" index="index"
				 open="(" close=")" separator=",">
			#{shopCode}
		</foreach>
	</select>

	<insert id="batchInsertShopInfoTab" parameterType="java.util.ArrayList">
		insert into
		shop_info(ShopID, ShopCode,UserName,GoodsArea, UserId, IssueTime,
		ShopLevel,HaveChild,CommodityLevel,WomenLevel,MenLevel,RoadDay,Operator)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.ShopID},
			#{item.ShopCode},
			#{item.UserName},
			#{item.GoodsArea},
			#{item.UserId},
			#{item.IssueTime},
			#{item.ShopLevel},
			#{item.HaveChild},
			#{item.CommodityLevel},
			#{item.WomenLevel},
			#{item.MenLevel},
			#{item.RoadDay},
			#{item.Operator}
			)
		</foreach>
	</insert>

	<insert id="batchInsertShopDisplayDesignTab" parameterType="java.util.ArrayList">
		REPLACE into
		shop_display_design(ShopId, ShopCode,CategoryName,MidCategoryName, DisplayPercent, Display_Qty,Operator)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.ShopId},
			#{item.ShopCode},
			#{item.CategoryName},
			#{item.MidCategoryName},
			#{item.DisplayPercent},
			#{item.Display_Qty},
			#{item.Operator}
			)
		</foreach>
	</insert>

	<insert id="batchInsertDisplayTab" parameterType="java.util.ArrayList">
		REPLACE into
		display(CategoryName, MidCategoryName,SmallCategoryName,MidDisplayDepth, DisplayDepth,
		Columns,Rows,Depth,QtyWeight,Operator)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.CategoryName},
			#{item.MidCategoryName},
			#{item.SmallCategoryName},
			#{item.MidDisplayDepth},
			#{item.DisplayDepth},
			#{item.Columns},
			#{item.Rows},
			#{item.Depth},
			#{item.QtyWeight},
			#{item.Operator}
			)
		</foreach>
	</insert>

	<insert id="batchInsertGoodsInfoTab" parameterType="java.util.ArrayList">
		REPLACE into
		goods_info(MatId, MatCode,MatName,CategoryName,
		MidCategoryName,SmallCategoryName,MinPackageQty,area,level,IsAllocationProhibited,Operator)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.MatId},
			#{item.MatCode},
			#{item.MatName},
			#{item.CategoryName},
			#{item.MidCategoryName},
			#{item.SmallCategoryName},
			#{item.MinPackageQty},
			#{item.area},
			#{item.level},
			#{item.prohibited},
			#{item.Operator}
			)
		</foreach>
	</insert>

	<select id="getShopUserNames" resultType="java.lang.String">
		SELECT DISTINCT UserName FROM shop_info WHERE UserName IS NOT NULL
	</select>

	<select id="getSkcByCategory" resultType="java.lang.String">
		<if test="bigCategoryNames != null" >
			SELECT MatCode FROM goods_info
			where
			CategoryName in (
			<foreach collection="bigCategoryNames" item="item" index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>

		<if test="midCategoryNames != null" >
			<if test="bigCategoryNames != null" >
				union
			</if>
			SELECT MatCode FROM goods_info
			where
			MidCategoryName in (
			<foreach collection="midCategoryNames" item="item" index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>

		<if test="smallCategoryNames != null" >
			<if test="bigCategoryNames != null or midCategoryNames != null ">
				union
			</if>
			SELECT MatCode FROM goods_info
			where
			SmallCategoryName in (
			<foreach collection="smallCategoryNames" item="item" index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
	</select>

	<select id="getShopBySaleDisplayLv" resultType="cn.nome.saas.allocation.model.old.issue.ShopInfoData">
		<if test="shopLevels != null" >
			SELECT ShopID, ShopCode FROM shop_info
			where
			ShopLevel in (
			<foreach collection="shopLevels" item="item" index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>

		<if test="displayLevels != null" >
			<if test="shopLevels != null" >
				union
			</if>
			SELECT ShopID, ShopCode FROM shop_info
			where
			DisplayLevel in (
			<foreach collection="displayLevels" item="item" index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
	</select>

	<select id="getRegioneNameList" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT(GoodsArea) as GoodsArea from shop_info where GoodsArea is not null
	  ]]>
	</select>
	<select id="getProvinceNameList" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT(ProvinceName) as ProvinceName from dws_dim_shop where ProvinceName is not null
	  ]]>
	</select>
	<select id="getCityNameList" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT(CityName) as CityName from dws_dim_shop where CityName is not null
	  ]]>
	</select>
	<select id="getShopCodeList" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT(ShopCode) as ShopCode from dws_dim_shop where ShopCode is not null
	  ]]>
	</select>

	<select id="getCategoryNameList" resultType="String">
		SELECT DISTINCT CategoryName FROM goods_info WHERE  CategoryName IS NOT NULL
	</select>

	<select id="getMidCategoryNameList" resultType="String">
		SELECT DISTINCT MidCategoryName FROM goods_info WHERE MidCategoryName IS NOT NULL
	</select>

	<select id="getSmallCategoryNameList" resultType="String">
		SELECT DISTINCT SmallCategoryName FROM goods_info WHERE  SmallCategoryName IS NOT NULL
	</select>
	<select id="getShopSaleLvList" resultType="String">
		SELECT DISTINCT ShopLevel FROM shop_info WHERE  ShopLevel IS NOT NULL
	</select>
	<select id="getShopDisplayLvList" resultType="String">
		SELECT DISTINCT CommodityLevel FROM shop_info WHERE  CommodityLevel IS NOT NULL
	</select>

	<select id="categoryList" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT CategoryName FROM `issue_detail` WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND Status = 0
		]]>
	</select>

	<select id="allMidCategorys" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT MidCategoryName FROM `issue_detail` WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND Status = 0
		]]>
	</select>
	<select id="midCategorys" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT MidCategoryName FROM `issue_detail` WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND CategoryName = #{categoryName} AND Status = 0
		]]>
	</select>

	<select id="allSmallCategorys" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT SmallCategoryName FROM `issue_detail` WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND Status = 0
		]]>
	</select>
	<select id="smallCategorys" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT SmallCategoryName FROM `issue_detail`
			WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND MidCategoryName = #{midCategoryName} AND Status = 0
		]]>
	</select>

	<select id="getTaskByStatus" resultType="cn.nome.saas.allocation.model.old.issue.IssueTaskVo">
		SELECT id taskId,run_time runTime,updated_at updateTime FROM issue_task WHERE task_status = #{status} ORDER BY id DESC LIMIT 1
	</select>

	<select id="issueInStockCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_in_stock WHERE TaskId = #{taskId} AND Status = 0
	</select>

	<select id="issueOutStockCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_out_stock WHERE TaskId = #{taskId}
	</select>

	<select id="issueNeedStockCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_need_stock WHERE TaskId = #{taskId} AND Status = 0
	</select>

	<select id="issueMidCategoryCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_mid_category_qty WHERE TaskId = #{taskId} AND Status = 0
	</select>

	<select id="issueDetailCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_detail WHERE TaskId = #{taskId} AND Status = 0
	</select>

	<select id="issueUndoCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_undo WHERE TaskId = #{taskId} AND Status = 0
	</select>

	<select id="issueGoodsDataCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_goods_data WHERE TaskId = #{taskId} AND Status = 0
	</select>

	<select id="issueCategoryDataCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_category_data WHERE TaskId = #{taskId} AND Status = 0
	</select>

	<select id="issueMidCategoryDataCount" resultType="Integer">
		SELECT COUNT(1) FROM issue_midcategory_data WHERE TaskId = #{taskId}  AND Status = 0
	</select>

	<select id="queryIssueGoodsData" resultType="cn.nome.saas.allocation.model.old.issue.IssueGoodsData">
		SELECT iis.ShopID,iis.TaskId,iis.MatCode,iis.SizeID,gi.CategoryName,gi.MidCategoryName,gi.SmallCategoryName,gi.level GoodsLevel
		,IFNULL(sddv.DisplayPercent,0) DisplayPercent,IFNULL(sddv.display_qty,0) DisplayQty
		,dv.displaydepth midDisplaydepth,dv.smallDisplaydepth
		,iis.CategoryCode
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi ON iis.MatCode = gi.MatCode
		LEFT JOIN shop_display_design_v sddv ON iis.ShopID = sddv.shopid AND gi.CategoryName = sddv.CategoryName AND gi.MidCategoryName = sddv.MidCategoryName
		LEFT JOIN display_v2 dv ON gi.CategoryName = dv.CategoryName AND gi.MidCategoryName = dv.MidCategoryName AND gi.SmallCategoryName = dv.SmallCategoryName
		WHERE iis.ShopID = #{shopId} AND iis.TaskId = #{taskId} AND iis.Status = 0
	</select>

	<delete id="batchDelGoodsData">
		delete from issue_goods_data WHERE ShopID = #{shopId} AND TaskId = #{taskId} AND Status=0
	</delete>

	<select id="issueInStockShopIds" resultType="java.lang.String">
		<![CDATA[
			SELECT DISTINCT ShopID FROM issue_in_stock WHERE TaskId = #{taskId} AND Status = 0
	  ]]>
	</select>

	<select id="categoryNewSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.IsNew = 1 AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="categoryProhibitedSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.IsProhibited = 1  AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="categoryValidSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.StockQty >= 5  AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="categoryCanSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		LEFT JOIN issue_out_stock ios ON iis.MatCode = ios.MatCode AND iis.TaskId = ios.TaskId
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND ios.StockQty >= gi.MinPackageQty  AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="categoryKeepSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.MinQty >= 1  AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="skcCountCategorys" resultType="java.lang.String">
		SELECT gi.CategoryName FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.Status = 0 AND gi.CategoryName IS  NOT NULL
		GROUP BY gi.CategoryName
	</select>

	<insert id="batchInsertCategoryCountData" parameterType="java.util.ArrayList">
		insert into
		issue_category_data(TaskId,ShopID,
		NewSkcCount,ProhibitedSkcCount,ValidSkcCount,KeepSkcCount,CanSkcCount,CategoryName)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.TaskId},
			#{item.ShopID},
			#{item.NewSkcCount},
			#{item.ProhibitedSkcCount},
			#{item.ValidSkcCount},
			#{item.KeepSkcCount},
			#{item.CanSkcCount},
			#{item.CategoryName}
			)
		</foreach>
	</insert>

	<select id="midCategoryCanSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		LEFT JOIN issue_out_stock ios ON iis.MatCode = ios.MatCode AND iis.TaskId = ios.TaskId
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND ios.StockQty >= gi.MinPackageQty AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<select id="midCategoryKeepSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis LEFT JOIN goods_info gi ON iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.MinQty >= 1 AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<select id="midCategoryNewSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.IsNew = 1 AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<select id="midCategoryProhibitedSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.IsProhibited = 1 AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<select id="midCategoryValidSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId}  AND iis.StockQty >= 5 AND iis.Status = 0
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<insert id="batchInsertMidCategoryCountData" parameterType="java.util.ArrayList">
		insert into
		issue_midcategory_data(TaskId,ShopID,
		NewSkcCount,ProhibitedSkcCount,ValidSkcCount,KeepSkcCount,CanSkcCount,CategoryName,MidCategoryName)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.TaskId},
			#{item.ShopID},
			#{item.NewSkcCount},
			#{item.ProhibitedSkcCount},
			#{item.ValidSkcCount},
			#{item.KeepSkcCount},
			#{item.CanSkcCount},
			#{item.CategoryName},
			#{item.MidCategoryName}
			)
		</foreach>
	</insert>

	<select id="queryGoodsData" resultType="cn.nome.saas.allocation.model.old.issue.IssueGoodsData">
		select igd.MatCode,igd.SizeID,igd.GoodsLevel, igd.SaleQty28, igd.SaleQty7, igd.DisplayPercent,igd.MidDisplaydepth,igd.SmallDisplaydepth,igd.SizeCount,igd.ShopRank,igd.NationalRank,igd.DisplayQty
		from issue_goods_data igd
		where shopid = #{shopId} AND TaskId= #{taskId} AND Status = 0
		AND MatCode in
		(
		<foreach collection="matcodes" item="item" index="index" separator=",">
			'${item}'
		</foreach>
		)
		AND SizeId in(
		<foreach collection="sizeIds" item="item" index="index" separator=",">
			'${item}'
		</foreach>
		)
	</select>

	<select id="moreIssueInStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueInStockDo">
		select
		iis.TaskId,iis.shopId,iis.MatCode,iis.SizeId,iis.TotalStockQty,iis.AvgSaleQty,iis.YearNo, iis.SeasonName,iis.StockQty, iis.PathStockQty,
		iis.MoveQty,iis.RuleName, iis.MinQty,
		iis.IsEliminate
		from issue_in_stock iis
		where shopid = #{shopId} AND TaskId= #{taskId} AND Status = 0
		AND MatCode in
		(
		<foreach collection="matcodes" item="item" index="index" separator=",">
			'${item}'
		</foreach>
		)
		AND SizeId in(
		<foreach collection="sizeIds" item="item" index="index" separator=",">
			'${item}'
		</foreach>
		)
	</select>

	<select id="syncIssueTime" resultType="java.lang.String">
		SELECT DISTINCT IssueTime FROM shop_info WHERE IssueTime IS NOT NULL
	</select>

	<insert id="batchInsertDicy" parameterType="java.util.ArrayList">
		insert into dictionary(type,para_key,para_value,Operator,remark)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.type},
			#{item.paraKey},
			#{item.paraValue},
			'sys',
			'sync'
			)
		</foreach>
	</insert>

	<select id="getIssueOutStock" resultType="cn.nome.saas.allocation.model.issue.IssueOutStock">
		SELECT MatCode matCode,SizeID sizeID,StockQty stockQty FROM issue_out_stock WHERE TaskId = #{taskId} AND MatCode = #{matCode} AND SizeID = #{sizeId}
	</select>

	<select id="issueOutStock" resultType="cn.nome.saas.allocation.repository.old.allocation.entity.IssueOutStockDO">
		SELECT MatCode,SizeID,StockQty FROM issue_out_stock WHERE TaskId = #{taskId}
	</select>

	<select id="issueDeatilDistStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueDetailDistStock">
		SELECT MatCode,SizeID,SUM(Qty) TotalDistStockQty
		FROM issue_detail WHERE TaskId = #{taskId} AND MatCode = #{matCode} AND SizeID = #{sizeId} AND Status = 0
	</select>

	<select id="getDetailStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueDetailDistStock">
		SELECT MatCode,SizeID,SUM(Qty) TotalDistStockQty FROM issue_detail
		WHERE InShopID = #{shopId} AND TaskId= #{taskId} AND Status = 0 GROUP BY MatCode,SizeID
	</select>

	<select id="getRemainStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueOutStockRemainDo">
		SELECT MatCode,SizeID,StockQty,TaskId,ID FROM issue_out_stock_remain
		WHERE TaskId = #{taskId} AND MatCode = #{matCode} AND SizeID = #{sizeId} AND Status = 0
	</select>

	<insert id="addRecalcRemainStock" parameterType="java.util.ArrayList">
		insert into issue_out_stock_remain(TaskId, MatCode,SizeID,StockQty,Status)
		values(
		#{importData.TaskId},
		#{importData.MatCode},
		#{importData.SizeID},
		#{importData.StockQty},
		2
		)
	</insert>

	<select id="getRecalcIssueGoodsData" resultType="cn.nome.saas.allocation.model.old.issue.IssueGoodsData">
		SELECT iis.ShopID,iis.TaskId,iis.MatCode,iis.SizeID,iis.SizeName,gi.CategoryName,gi.MidCategoryName,gi.SmallCategoryName,gi.level GoodsLevel
		,IFNULL(sddv.DisplayPercent,0) DisplayPercent,IFNULL(sddv.display_qty,0) DisplayQty
		,dv.displaydepth midDisplaydepth,dv.smallDisplaydepth
		,iis.CategoryCode
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi ON iis.MatCode = gi.MatCode
		LEFT JOIN shop_display_design_v sddv ON iis.ShopID = sddv.shopid AND gi.CategoryName = sddv.CategoryName AND gi.MidCategoryName = sddv.MidCategoryName
		LEFT JOIN display_v2 dv ON gi.CategoryName = dv.CategoryName AND gi.MidCategoryName = dv.MidCategoryName AND gi.SmallCategoryName = dv.SmallCategoryName
		WHERE iis.ShopID = #{shopId} AND iis.TaskId = #{taskId} AND iis.Status = 2
	</select>

	<select id="recalcSkcCountCategorys" resultType="java.lang.String">
		SELECT gi.CategoryName FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.Status = 2 AND gi.CategoryName IS  NOT NULL
		GROUP BY gi.CategoryName
	</select>

	<select id="recalcCategoryNewSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.IsNew = 1 AND iis.Status = 2
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="recalcCategoryProhibitedSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.IsProhibited = 1 AND iis.Status = 2
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="recalcCategoryValidSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.StockQty >= 5 AND iis.Status = 2
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="recalcCategoryCanSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		LEFT JOIN issue_out_stock ios ON iis.MatCode = ios.MatCode AND iis.TaskId = ios.TaskId AND iis.Status = 2
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND ios.StockQty >= gi.MinPackageQty
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<select id="recalcCategoryKeepSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.MinQty >= 1 AND iis.Status = 2
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName
	</select>

	<insert id="batchInsertRecalcCategoryCountData" parameterType="java.util.ArrayList">
		insert into
		issue_category_data(TaskId,ShopID,
		NewSkcCount,ProhibitedSkcCount,ValidSkcCount,KeepSkcCount,CanSkcCount,CategoryName,Status)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.TaskId},
			#{item.ShopID},
			#{item.NewSkcCount},
			#{item.ProhibitedSkcCount},
			#{item.ValidSkcCount},
			#{item.KeepSkcCount},
			#{item.CanSkcCount},
			#{item.CategoryName},
			#{item.Status}
			)
		</foreach>
	</insert>

	<select id="recalcMidCategoryCanSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		LEFT JOIN issue_out_stock ios ON iis.MatCode = ios.MatCode AND iis.TaskId = ios.TaskId
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.Status = 2 AND ios.StockQty >= gi.MinPackageQty
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<select id="recalcMidCategoryKeepSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis LEFT JOIN goods_info gi ON iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.Status = 2 AND iis.MinQty >= 1
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<select id="recalcMidCategoryNewSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.Status = 2 AND iis.IsNew = 1
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<select id="recalcMidCategoryProhibitedSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.Status = 2 AND iis.IsProhibited = 1
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<select id="recalcMidCategoryValidSkcCount" resultType="cn.nome.saas.allocation.model.old.issue.CategorySkcData">
		SELECT COUNT(1) SkcCount,gi.CategoryName,gi.MidCategoryName
		FROM issue_in_stock iis
		LEFT JOIN goods_info gi on iis.MatCode = gi.MatCode
		WHERE iis.ShopID = #{shopId} AND iis.TaskId= #{taskId} AND iis.Status = 2 AND iis.StockQty >= 5
		AND CategoryName IN
		<foreach collection="categorys" item="category" index="index"
				 open="(" close=")" separator=",">
			#{category}
		</foreach>
		GROUP BY gi.CategoryName,gi.MidCategoryName
	</select>

	<insert id="insertRecalcMidCategoryCountData" parameterType="java.util.ArrayList">
		insert into
		issue_midcategory_data(TaskId,ShopID,
		NewSkcCount,ProhibitedSkcCount,ValidSkcCount,KeepSkcCount,CanSkcCount,CategoryName,MidCategoryName,Status)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.TaskId},
			#{item.ShopID},
			#{item.NewSkcCount},
			#{item.ProhibitedSkcCount},
			#{item.ValidSkcCount},
			#{item.KeepSkcCount},
			#{item.CanSkcCount},
			#{item.CategoryName},
			#{item.MidCategoryName},
			#{item.Status}
			)
		</foreach>
	</insert>

	<select id="issueOutStockRemainStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueOutStockRemainDo">
		SELECT MatCode,SizeID,StockQty,TaskId,ID FROM issue_out_stock_remain WHERE TaskId = #{taskId} AND Status = 0
	</select>

	<select id="issueDeatilShopDistStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueDetailDistStock">
		SELECT MatCode,SizeID,TaskId,SUM(Qty) TotalDistStockQty
		FROM issue_detail
		WHERE InShopID = #{shopId} AND TaskId= #{taskId} AND MatCode = #{matCode} AND SizeID = #{sizeId} AND Status = 0
	</select>

	<insert id="batchInsertGoodsData" parameterType="java.util.ArrayList">
		insert into
		issue_goods_data(TaskId,ShopID, MatCode,SizeID,SaleQty7,SaleQty28,CategoryName,MidCategoryName,SmallCategoryName,GoodsLevel,DisplayPercent,SizeCount,MidDisplaydepth,SmallDisplaydepth,CategoryCode,ShopRank,NationalRank,Status,DisplayQty)
		values
		<foreach collection="importData" item="item" index="index"
				 separator=",">
			(
			#{item.TaskId},
			#{item.ShopID},
			#{item.MatCode},
			#{item.SizeID},
			#{item.SaleQty7},
			#{item.SaleQty28},
			#{item.CategoryName},
			#{item.MidCategoryName},
			#{item.SmallCategoryName},
			#{item.GoodsLevel},
			#{item.DisplayPercent},
			#{item.SizeCount},
			#{item.MidDisplaydepth},
			#{item.SmallDisplaydepth},
			#{item.CategoryCode},
			#{item.ShopRank},
			#{item.NationalRank},
			#{item.Status},
			#{item.DisplayQty}
			)
		</foreach>
	</insert>

	<delete id="delRecalcGoodsData">
		DELETE FROM issue_goods_data WHERE ShopID = #{shopId} AND TaskId = #{taskId}  AND Status = 2
	</delete>

	<select id="getRecalcDetailStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueDetailDistStock">
		SELECT MatCode,SizeID,SUM(Qty) TotalDistStockQty FROM issue_detail
		WHERE InShopID = #{shopId} AND TaskId= #{taskId} AND Status = 2 GROUP BY MatCode,SizeID
	</select>

	<select id="getRecalcRemainStock" resultType="cn.nome.saas.allocation.model.old.issue.IssueOutStockRemainDo">
		SELECT MatCode,SizeID,StockQty,TaskId,ID FROM issue_out_stock_remain
		WHERE TaskId = #{taskId} AND MatCode = #{matCode} AND SizeID = #{sizeId} AND Status = 2
	</select>

	<select id="matcodeStockRemain" resultType="cn.nome.saas.allocation.model.old.issue.IssueOutStockRemainDo">
		SELECT MatCode,SizeID,StockQty,TaskId,ID FROM issue_out_stock_remain
		WHERE TaskId = #{taskId} AND Status = 0
        <if test="matCodes != null and matCodes.size > 0">
		AND MatCode IN
		(
		<foreach collection="matCodes" item="item" index="index" separator=",">
			'${item}'
		</foreach>
		)
        </if>
        <if test="sizeIds != null and sizeIds.size > 0">
		AND SizeID in(
		<foreach collection="sizeIds" item="item" index="index" separator=",">
			'${item}'
		</foreach>
		)
        </if>
	</select>

	<select id="getMidCategoryPercentAvgSaleQty" resultType="cn.nome.saas.allocation.model.old.issue.IssueMidCategoryQtyDo">
		SELECT ShopID,CategoryName,MidCategoryName,AvgSaleQty FROM issue_mid_category_qty
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = #{status}
	</select>

</mapper>