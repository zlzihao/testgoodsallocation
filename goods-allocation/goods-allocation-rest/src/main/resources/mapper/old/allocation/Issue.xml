<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.old.allocation.dao.IssueDOMapper2" >

	<insert id="addTask" useGeneratedKeys="true" keyColumn="id" keyProperty="task.id" parameterType="cn.nome.saas.allocation.model.old.allocation.IssueTask">
		insert into issue_task(name,task_status,run_time,created_at,updated_at,remark,operator) values
		(#{task.name},#{task.taskStatus},#{task.runTime},#{task.createdAt},#{task.updatedAt},#{task.remark},#{task.operator})
	</insert>

	<insert id="addIssueInStock" parameterType="java.util.List">
		insert into issue_in_stock(TaskId,ShopID,QuotePrice,MatCode,SizeID,SizeName,AvgSaleAmt,AvgSaleQty,StockQty,PathStockQty,MoveQty,TotalStockQty,WarehouseStockQty,NeedStockQtyInt,IsNew,IsProhibited, YearNo, SeasonName, RuleName, MinQty,CategoryCode,
		IsEliminate)
		values
		<foreach collection="list" item="item" index="index"
			separator=","> 
			(#{item.TaskId},#{item.ShopID},#{item.QuotePrice},#{item.MatCode},#{item.SizeID},#{item.SizeName},#{item.AvgSaleAmt},#{item.AvgSaleQty},#{item.StockQty},#{item.PathStockQty},#{item.MoveQty},#{item.TotalStockQty},#{item.WarehouseStockQty},#{item.NeedStockQtyInt},#{item.IsNew},#{item.IsProhibited},
			 #{item.YearNo}, #{item.SeasonName}, #{item.ruleName}, #{item.minQty}, #{item.CategoryCode}, #{item.IsEliminate})
		</foreach>
	</insert>
	
	<insert id="addIssueOutStock" parameterType="java.util.List">
		insert into issue_out_stock(TaskId,StockID,QuotePrice,MatCode,SizeID,AvgSaleAmt,AvgSaleQty,StockQty) values
		<foreach collection="list" item="item" index="index"
			separator=","> 
			(#{item.TaskId},#{item.StockID},#{item.QuotePrice},#{item.MatCode},#{item.SizeID},#{item.AvgSaleAmt},#{item.AvgSaleQty},#{item.StockQty})
		</foreach>
	</insert>

	<insert id="midMidCategoryQty">

		insert into issue_mid_category_qty(taskid,shopid,CategoryName,MidCategoryName,AvgSaleQty,DisplayQty,NeedQty)
		select a.taskid,a.ShopID,a.CategoryName,a.MidCategoryName,a.AvgSaleQty,
		case when b.DisplayQty is null then 0 else b.DisplayQty end as DisplayQty,
		case when b.DisplayQty is null then 0 else (if (DisplayQtyA > b.DisplayQty + (b.IssueDay+b.SafeDay) * AvgSaleQty, DisplayQtyA, b.DisplayQty + (b.IssueDay+b.SafeDay) * AvgSaleQty)) end as NeedQty
		from(
			select a.taskid,a.shopid,a.CategoryName,a.MidCategoryName,sum(a.AvgSaleQty) as AvgSaleQty
			FROM (
				SELECT a.MatCode, a.SizeID, a.taskid, a.shopid, b.CategoryName, b.MidCategoryName, a.AvgSaleQty FROM issue_in_stock a
				left join ${tabName} b on a.MatCode=b.MatCode
				where  a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 0 AND a.IsProhibited = 0 and a.matcode in(
					select matcode from goods_area_level_detail where shopid='${shopId}'
				) and a.IsEliminate = 0
				union
				SELECT a.MatCode, a.SizeID, a.taskid, a.shopid, b.CategoryName, b.MidCategoryName, a.AvgSaleQty  from `issue_in_stock` a
				left join ${tabName} b on a.MatCode=b.MatCode
				left join issue_out_stock ios on a.MatCode = ios.matCode and a.SizeID = ios.SizeID
				where  a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 0 AND a.IsProhibited = 0 and a.matcode in(
					select matcode from goods_area_level_detail where shopid='${shopId}'
				) and a.IsEliminate = 1 and ios.StockQty > b.MinPackageQty
			) a
			group by a.taskid,a.ShopID,a.CategoryName,a.MidCategoryName
		) a left join(
			select a.*,b.DisplayDepth,a.Display_Qty*b.DisplayDepth as DisplayQtyA, a.Display_Qty*b.DisplayDepth*a.DisplayPercent as DisplayQty,c.IssueDay,c.SafeDay from shop_display_design_v a
			LEFT JOIN display_v b on a.MidCategoryName = b.MidCategoryName and a.CategoryName = b.CategoryName
			LEFT JOIN shop_info c on a.ShopID=c.ShopId
		) b on a.ShopID=b.ShopId and a.MidCategoryName=b.MidCategoryName and a.CategoryName=b.CategoryName

	</insert>

	<insert id="addNeedSkuStock">
	<![CDATA[
	insert into issue_need_stock(TaskId,ShopID,MatCode,SizeID,SizeName,TotalSaleQty,NeedQty,PercentCategory,NeedStockQty1,NeedStockQty2,minQty,CategoryName,MidCategoryName,TotalStockQty,NeedStockQty)
	select a.*,(a.minQty+((a.NeedStockQty1+a.NeedStockQty2-abs(a.NeedStockQty1-a.NeedStockQty2))/2)+abs(a.minQty-((a.NeedStockQty1+a.NeedStockQty2-abs(a.NeedStockQty1-a.NeedStockQty2))/2)))/2 as NeedStockQty
	from(
			select a.taskid,a.shopid,a.matcode,a.sizeid,a.SizeName,b.TotalSaleQty,c.NeedQty,
			round(a.AvgSaleQty/TotalSaleQty,4) as PercentCategory,
			c.NeedQty*round(a.AvgSaleQty/TotalSaleQty,4) as NeedStockQty1,
			a.AvgSaleQty*45 as NeedStockQty2,
			CASE WHEN a.minQty is null THEN 0 ELSE a.minQty END + (shop.IssueDay+shop.SafeDay)*a.AvgSaleQty  minQty,
			a.CategoryName,a.MidCategoryName,a.TotalStockQty
			from (
				select a.*,b.CategoryName,b.MidCategoryName from issue_in_stock a
				left JOIN ${tabName} b on a.MatCode=b.MatCode
				where a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 0 AND a.IsProhibited = 0 and a.matcode in(
					select matcode from goods_area_level_detail where shopid='${shopId}'
				) and a.IsEliminate = 0
				union
				SELECT a.*,b.CategoryName,b.MidCategoryName from issue_in_stock a
				left JOIN ${tabName} b on a.MatCode=b.MatCode
				left join issue_out_stock ios on a.MatCode = ios.matCode and a.SizeID = ios.SizeID
				where a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 0 AND a.IsProhibited = 0 and a.matcode in(
					select matcode from goods_area_level_detail where shopid='${shopId}'
				) and a.IsEliminate = 1 and ios.StockQty > b.MinPackageQty
			) a
			left JOIN(
				SELECT CategoryName,MidCategoryName,SUM(AvgSaleQty) TotalSaleQty from (
				SELECT a.matcode, a.SizeID, a.AvgSaleQty, b.CategoryName,b.MidCategoryName from issue_in_stock a
				left join ${tabName} b on a.MatCode=b.MatCode
				where  a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 0 AND a.IsProhibited = 0 and a.matcode in(
					select matcode from goods_area_level_detail where shopid='${shopId}'
				) and a.IsEliminate = 0
				union
				SELECT a.matcode, a.SizeID, a.AvgSaleQty, b.CategoryName,b.MidCategoryName from `issue_in_stock` a
				left join ${tabName} b on a.MatCode=b.MatCode
				left join issue_out_stock ios on a.MatCode = ios.matCode and a.SizeID = ios.SizeID
				where  a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 0 AND a.IsProhibited = 0 and a.matcode in(
					select matcode from goods_area_level_detail where shopid='${shopId}'
				) and a.IsEliminate = 1 and ios.StockQty > b.MinPackageQty ) a
				group by CategoryName,MidCategoryName
			)b on a.MidCategoryName = b.MidCategoryName and a.CategoryName = b.CategoryName
			left join issue_mid_category_qty c
			ON c.TaskId = ${taskId} AND a.CategoryName = c.CategoryName and a.MidCategoryName = c.MidCategoryName and a.shopid= c.shopid AND c.Status = 0
			LEFT JOIN shop_info shop on shop.shopid = a.shopid
			WHERE TotalSaleQty > 0
	)a
	]]>
	</insert>
	
  	<select id="getShopIdList" resultType="java.lang.String" parameterType="java.lang.String">
			select distinct(shopid) as shopid from issue_in_stock WHERE Status = 0
  	</select>


	<select id="getEnoughStockSku" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
	  <![CDATA[
					SELECT a.matcode,a.sizeid,(a.StockQty-b.needTotalStockQty) as remainQty from issue_out_stock a
					left join(
						select matcode,sizeid,sum(NeedStockQty-TotalStockQty) as needTotalStockQty
						from issue_need_stock
						where TaskId=${taskId} AND Status = 0 and NeedStockQty-TotalStockQty>0
						group by matcode,sizeid
					) b on a.matcode=b.matcode and a.sizeid=b.sizeid
					where a.TaskId=${taskId} and (a.StockQty-b.needTotalStockQty)>=0
	  ]]>
	</select>
	<select id="getNotEnoughStockSku" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
	  <![CDATA[
					SELECT a.matcode,a.sizeid,a.StockQty,(a.StockQty-b.needTotalStockQty) as remainQty from issue_out_stock a
					left join(
						select matcode,sizeid,sum(NeedStockQty-TotalStockQty) as needTotalStockQty from issue_need_stock
						where TaskId=${taskId} AND Status = 0 AND NeedStockQty-TotalStockQty>0
						group by matcode,sizeid
					) b on a.matcode=b.matcode and a.sizeid=b.sizeid
					where a.TaskId=${taskId} and (a.StockQty-b.needTotalStockQty)<0
	  ]]>
	</select>

	<insert id="addEnoughStockSku">
		insert into issue_detail(TaskId,InShopID,MatCode,SizeID,SizeName,Qty,PackageQty,CategoryName,MidCategoryName,QuotePrice,NeedQty,OrderPackage,MinPackageQty,SmallCategoryName,MatName,IsEno,PercentCategory)
		select
		a.TaskId,a.ShopID,a.MatCode,a.SizeID,a.SizeName,
		(a.NeedStockQty-a.TotalStockQty) AS Qty,
		round((a.NeedStockQty-a.TotalStockQty)/b.MinPackageQty) * b.MinPackageQty as PackageQty,
		a.CategoryName,a.MidCategoryName,
		ddg.QuotePrice,
		(a.NeedStockQty-a.TotalStockQty) NeedQty,
		round((a.NeedStockQty-a.TotalStockQty)/b.MinPackageQty) AS OrderPackage,
		b.MinPackageQty,b.SmallCategoryName,b.MatName,1,a.PercentCategory
		from issue_need_stock a
		left join goods_info b on a.MatCode=b.MatCode
		LEFT JOIN dws_dim_goods ddg ON a.MatCode = ddg.MatCode
		where a.matcode='${matCode}' and a.sizeId='${sizeId}' and a.taskId=${taskId} AND a.Status = 0 AND (a.NeedStockQty-a.TotalStockQty) > 0
	</insert>

	<insert id="addNotEnoughStockSku">
		insert into issue_detail(TaskId,InShopID,MatCode,SizeID,SizeName,Qty,PackageQty,CategoryName,MidCategoryName,QuotePrice,NeedQty,OrderPackage,MinPackageQty,SmallCategoryName,MatName,PercentCategory)
		select
			a.TaskId,a.ShopID,a.MatCode,a.SizeID,a.SizeName,
			(a.NeedStockQty-a.TotalStockQty)/b.totalQty*${stockQty} as Qty,
			round((a.NeedStockQty-a.TotalStockQty)/b.totalQty*${stockQty}/c.MinPackageQty) * c.MinPackageQty as PackageQty,
			a.CategoryName,a.MidCategoryName,
			ddg.QuotePrice,
			(a.NeedStockQty-a.TotalStockQty) as NeedQty,
			round((a.NeedStockQty-a.TotalStockQty)/b.totalQty*${stockQty}/c.MinPackageQty) OrderPackage,
			c.MinPackageQty,c.SmallCategoryName,c.MatName,a.PercentCategory
		from issue_need_stock a
		INNER JOIN(
			select MatCode,SizeID,sum(NeedStockQty-TotalStockQty) as totalQty
			from issue_need_stock
			where matcode='${matCode}' and sizeId='${sizeId}' and taskId=${taskId} AND Status = 0 and NeedStockQty-TotalStockQty > 0
		) b on a.MatCode=b.MatCode and a.SizeID=b.SizeID
		left JOIN goods_info c on a.MatCode=c.MatCode
		LEFT JOIN dws_dim_goods ddg ON a.MatCode = ddg.MatCode
		where a.matcode='${matCode}' and a.sizeId='${sizeId}' and a.taskId=${taskId} AND a.Status = 0 and (a.NeedStockQty-a.TotalStockQty) > 0
	</insert>
	
	<select id="getMidCategorySale" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
	  <![CDATA[
			select * from(
				select a.ShopID,b.CategoryName,b.MidCategoryName,avg(a.AvgSaleQty) as AvgSaleQty from issue_in_stock a inner join goods_info b
				on a.matcode = b.matcode
				where a.IsNew='0' and a.taskId=${taskId} AND a.Status = 0
				group by a.ShopID,b.CategoryName,b.MidCategoryName
			)a where a.MidCategoryName is not null
	  ]]>
	</select>
	<select id="getGoodsInfo" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
	  <![CDATA[
			select matCode,midCategoryCode,midCategoryName,categoryCode,categoryName from goods_info
	  ]]>
	</select>
	<select id="getProhibitedGoodsList" resultType="cn.nome.saas.allocation.model.old.allocation.ProhibitedGoods">
	  <![CDATA[
				SELECT a.*,a.typeid as matcode from(
						select b.shopid as shopid,a.type,a.typeid from prohibited_goods a left join dws_dim_shop b on a.areaid=b.regioneno where a.AreaID is not NULL 
						UNION
						select a.shopid,a.type,a.typeid  from prohibited_goods a where ShopID is not null and AreaID is null
				) a where a.type=4
				UNION
				SELECT a.*,b.MatCode as matcode from(
						select b.shopid as shopid,a.type,a.typeid from prohibited_goods a left join dws_dim_shop b on a.areaid=b.regioneno where a.AreaID is not NULL 
						UNION
						select a.shopid,a.type,a.typeid  from prohibited_goods a where ShopID is not null and AreaID is null
				) a left join dws_dim_goods b on a.typeid=b.SmallCategoryCode where a.type=3
				UNION
				SELECT a.*,b.MatCode as matcode from(
						select b.shopid as shopid,a.type,a.typeid from prohibited_goods a left join dws_dim_shop b on a.areaid=b.regioneno where a.AreaID is not NULL 
						UNION
						select a.shopid,a.type,a.typeid  from prohibited_goods a where ShopID is not null and AreaID is null
				) a left join dws_dim_goods b on a.typeid=b.MidCategoryCode where a.type=2
	  ]]>
	</select>

	<!--<update id="updateProhibitedGoods">-->
		<!--UPDATE issue_in_stock set IsProhibited=1 where TaskId=${taskId} and shopid='${shopId}' and MatCode in(-->
		<!--<foreach collection="list" item="item" index="index" separator=",">-->
			<!--#{item}-->
		<!--</foreach>-->
		<!--)-->
	<!--</update>-->

	<select id="getShopAvg" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
	  <![CDATA[
			select ShopId,round(avg(AvgSaleQty),2) as AvgSaleQty from issue_in_stock
			where TaskId=${taskId} AND Status = 0
			group by ShopID
		]]>
	</select>

	<update id="updateTaskStatus">
		UPDATE issue_task SET task_status = 1,updated_at = now() WHERE id = #{taskId}
	</update>

	<select id="getShops" resultType="cn.nome.saas.allocation.model.old.allocation.ShopInfoDo">
		select ShopID,ShopCode,HaveChild from shop_info
	</select>

	<select id="shops" resultType="cn.nome.saas.allocation.model.old.allocation.ShopInfoDo">
		SELECT si.ID,si.ShopCode,si.ShopID,si.HaveChild FROM dws_dim_shop ds INNER JOIN shop_info si on si.ShopCode = ds.ShopCode
	</select>

	<select id="getShop" resultType="cn.nome.saas.allocation.model.old.allocation.ShopInfoDo">
		select ShopID,ShopCode,HaveChild from shop_info WHERE ShopID = #{shopId}
	</select>

	<select id="getIssueUndoData" resultType="cn.nome.saas.allocation.model.old.issue.IssueUndoData">
		<![CDATA[

			SELECT ud.TaskId,ud.ShopID AS InShopID,ud.MatCode,ud.SizeID,ud.SizeName,ud.QuotePrice,ud.IsNew,ud.IsProhibited,
			ud.AvgSaleQty,ud.StockQty,ud.TotalStockQty,
			gi.MinPackageQty,gi.CategoryName,gi.MidCategoryName,gi.SmallCategoryName,gi.MatName,
			ios.StockQty OutStockQty,
			ud.YearNo, ud.SeasonName, ud.PathStockQty, ud.MoveQty,
			ud.RuleName, ud.MinQty,ud.Status, ud.IsEliminate
			FROM(
				SELECT TaskId,ShopID,MatCode,SizeID,SizeName,QuotePrice,IsNew,IsProhibited,AvgSaleQty,StockQty,TotalStockQty, YearNo, SeasonName, PathStockQty, MoveQty, RuleName, MinQty,Status, IsEliminate
				FROM issue_in_stock iis
				WHERE ShopID= '${shopId}' AND TaskId = #{taskId} AND Status = 0
				AND (
					SELECT COUNT(1) AS num FROM issue_detail isd
					WHERE isd.InShopID = iis.ShopID AND isd.MatCode = iis.MatCode AND isd.SizeID = iis.SizeID AND isd.TaskId = iis.TaskId AND isd.Status = 0
				) = 0
			) ud
			LEFT JOIN issue_out_stock ios ON ud.MatCode = ios.MatCode AND ud.SizeID = ios.SizeID AND ud.TaskId = ios.TaskId
			LEFT JOIN goods_info gi ON ud.MatCode = gi.MatCode
			WHERE gi.CategoryName IS NOT NULL AND gi.MatName IS NOT NULL

		]]>
	</select>

	<select id="getGoodsMatCodeList" resultType="java.lang.String">
      select MatCode from dws_dim_goods
  </select>

	<insert id="addIssueRemainStock" parameterType="cn.nome.saas.allocation.model.old.issue.IssueOutStockRemainDo">
		insert into issue_out_stock_remain(TaskId,MatCode,SizeID,StockQty,Status) values
		(#{remainDo.TaskId},#{remainDo.MatCode},#{remainDo.SizeID},#{remainDo.StockQty},#{remainDo.Status})
	</insert>

	<insert id="addRecalcIssueInStock" parameterType="java.util.List">
		insert into issue_in_stock(TaskId,ShopID,QuotePrice,MatCode,SizeID,SizeName,AvgSaleAmt,AvgSaleQty,StockQty,PathStockQty,MoveQty,TotalStockQty,WarehouseStockQty,NeedStockQtyInt,IsNew,IsProhibited, YearNo, SeasonName, RuleName, MinQty,CategoryCode,Status
		, IsEliminate
		) values
		<foreach collection="list" item="item" index="index"
				 separator=",">
			(#{item.TaskId},#{item.ShopID},#{item.QuotePrice},#{item.MatCode},#{item.SizeID},#{item.SizeName},#{item.AvgSaleAmt},#{item.AvgSaleQty},#{item.StockQty},#{item.PathStockQty},#{item.MoveQty},#{item.TotalStockQty},#{item.WarehouseStockQty},#{item.NeedStockQtyInt},#{item.IsNew},#{item.IsProhibited},
			#{item.YearNo}, #{item.SeasonName}, #{item.ruleName}, #{item.minQty}, #{item.CategoryCode},2, #{item.IsEliminate})
		</foreach>
	</insert>

	<select id="getRecalcShopMidCategorySale" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
		<![CDATA[
			select a.ShopID,b.CategoryName,b.MidCategoryName,avg(a.AvgSaleQty) as AvgSaleQty from issue_in_stock a inner join goods_info b
			on a.matcode = b.matcode
			where a.ShopID= #{shopId} and a.taskId= #{taskId} AND a.Status = 2 AND a.IsNew='0' AND b.MidCategoryName is not null
			group by a.ShopID,b.CategoryName,b.MidCategoryName
	  ]]>
	</select>

	<insert id="recalcMidCategoryQty">
		insert into issue_mid_category_qty(taskid,shopid,CategoryName,MidCategoryName,AvgSaleQty,DisplayQty,NeedQty,Status)
		select a.taskid,a.ShopID,a.CategoryName,a.MidCategoryName,a.AvgSaleQty,
			case when b.DisplayQty is null then 0 else b.DisplayQty end as DisplayQty,
			case when b.DisplayQty is null then 0 else (if (DisplayQtyA > b.DisplayQty + (b.IssueDay+b.SafeDay) * AvgSaleQty, DisplayQtyA, b.DisplayQty + (b.IssueDay+b.SafeDay) * AvgSaleQty)) end as NeedQty,2
		from(
			select a.taskid,a.shopid,a.CategoryName,a.MidCategoryName,sum(a.AvgSaleQty) as AvgSaleQty
			FROM (
			SELECT a.MatCode, a.SizeID, a.taskid, a.shopid, b.CategoryName, b.MidCategoryName, a.AvgSaleQty FROM issue_in_stock a
			left join ${tabName} b on a.MatCode=b.MatCode
			where  a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 2 AND a.IsProhibited = 0 and a.matcode in(
			select matcode from goods_area_level_detail where shopid='${shopId}'
			) and a.IsEliminate = 0
			union
			SELECT a.MatCode, a.SizeID, a.taskid, a.shopid, b.CategoryName, b.MidCategoryName, a.AvgSaleQty  from `issue_in_stock` a
			left join ${tabName} b on a.MatCode=b.MatCode
			left join issue_out_stock ios on a.MatCode = ios.matCode and a.SizeID = ios.SizeID
			where  a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 2 AND a.IsProhibited = 0 and a.matcode in(
			select matcode from goods_area_level_detail where shopid='${shopId}'
			) and a.IsEliminate = 1 and ios.StockQty > b.MinPackageQty
			) a
			group by a.taskid,a.ShopID,a.CategoryName,a.MidCategoryName
		) a left join(
			select a.*,b.DisplayDepth,a.Display_Qty*b.DisplayDepth as DisplayQtyA, a.Display_Qty*b.DisplayDepth*a.DisplayPercent as DisplayQty,c.IssueDay,c.SafeDay from shop_display_design_v a
			LEFT JOIN display_v b on a.MidCategoryName = b.MidCategoryName and a.CategoryName = b.CategoryName
			LEFT JOIN shop_info c on a.ShopID=c.ShopId
		) b on a.ShopID=b.ShopId and a.MidCategoryName=b.MidCategoryName and a.CategoryName=b.CategoryName
	</insert>

	<insert id="recalcNeedSkuStock">
		<![CDATA[
		insert into issue_need_stock(TaskId,ShopID,MatCode,SizeID,SizeName,TotalSaleQty,NeedQty,PercentCategory,NeedStockQty1,NeedStockQty2,minQty,CategoryName,MidCategoryName,TotalStockQty,NeedStockQty,Status)
		select a.*,(a.minQty+((a.NeedStockQty1+a.NeedStockQty2-abs(a.NeedStockQty1-a.NeedStockQty2))/2)+abs(a.minQty-((a.NeedStockQty1+a.NeedStockQty2-abs(a.NeedStockQty1-a.NeedStockQty2))/2)))/2 as NeedStockQty,2
		from(
				select a.taskid,a.shopid,a.matcode,a.sizeid,a.SizeName,b.TotalSaleQty,c.NeedQty,
				round(a.AvgSaleQty/TotalSaleQty,4) as PercentCategory,
				c.NeedQty*round(a.AvgSaleQty/TotalSaleQty,4) as NeedStockQty1,
				a.AvgSaleQty*45 as NeedStockQty2,
				CASE WHEN a.minQty is null THEN 0 ELSE a.minQty END + (shop.IssueDay+shop.SafeDay)*a.AvgSaleQty  minQty,
				a.CategoryName,a.MidCategoryName,a.TotalStockQty
				from (
					select a.*,b.CategoryName,b.MidCategoryName from issue_in_stock a
					left JOIN ${tabName} b on a.MatCode=b.MatCode
					where a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 2 AND a.IsProhibited = 0 and a.matcode in(
					select matcode from goods_area_level_detail where shopid='${shopId}'
					) and a.IsEliminate = 0
					union
					SELECT a.*,b.CategoryName,b.MidCategoryName from issue_in_stock a
					left JOIN ${tabName} b on a.MatCode=b.MatCode
					left join issue_out_stock ios on a.MatCode = ios.matCode and a.SizeID = ios.SizeID
					where a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 2 AND a.IsProhibited = 0 and a.matcode in(
						select matcode from goods_area_level_detail where shopid='${shopId}'
					) and a.IsEliminate = 1 and ios.StockQty > b.MinPackageQty
				)a
				left JOIN(
					SELECT CategoryName,MidCategoryName,SUM(AvgSaleQty) TotalSaleQty from (
					SELECT a.matcode, a.SizeID, a.AvgSaleQty, b.CategoryName,b.MidCategoryName from issue_in_stock a
					left join ${tabName} b on a.MatCode=b.MatCode
					where  a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 2 AND a.IsProhibited = 0 and a.matcode in(
						select matcode from goods_area_level_detail where shopid='${shopId}'
					) and a.IsEliminate = 0
					union
					SELECT a.matcode, a.SizeID, a.AvgSaleQty, b.CategoryName,b.MidCategoryName from `issue_in_stock` a
					left join ${tabName} b on a.MatCode=b.MatCode
					left join issue_out_stock ios on a.MatCode = ios.matCode and a.SizeID = ios.SizeID
					where  a.taskid=${taskId} and a.shopid='${shopId}' AND a.Status = 2 AND a.IsProhibited = 0 and a.matcode in(
						select matcode from goods_area_level_detail where shopid='${shopId}'
					) and a.IsEliminate = 1 and ios.StockQty > b.MinPackageQty ) a
					group by CategoryName,MidCategoryName
				)b on a.MidCategoryName = b.MidCategoryName and a.CategoryName = b.CategoryName
				LEFT JOIN (
					SELECT CategoryName,MidCategoryName,NeedQty FROM issue_mid_category_qty WHERE shopid = #{shopId} AND TaskId = #{taskId} AND Status = 2
				) c ON a.CategoryName = c.CategoryName and a.MidCategoryName = c.MidCategoryName
				left join shop_info shop on shop.shopid = a.shopid
				WHERE a.shopid = #{shopId} AND TotalSaleQty > 0
		)a
	]]>
	</insert>


	<select id="getRecalcEnoughStockSku" resultType="cn.nome.saas.allocation.model.old.issue.IssueOutStockRemainDo">
		<![CDATA[

					SELECT a.MatCode,a.SizeID,a.StockQty,(a.StockQty-b.needTotalStockQty) as remainQty from issue_out_stock_remain a
					left join(
						select matcode,sizeid,sum(NeedStockQty-TotalStockQty) as needTotalStockQty
						from issue_need_stock
						WHERE ShopId=#{shopId} AND TaskId=${taskId} AND Status = 2 AND NeedStockQty-TotalStockQty>0
						group by matcode,sizeid
					) b on a.matcode=b.matcode and a.sizeid=b.sizeid
					where a.TaskId=${taskId} AND a.Status = 2 and (a.StockQty-b.needTotalStockQty)>=0

		]]>
	</select>

	<select id="getRecalcNotEnoughStockSku" resultType="cn.nome.saas.allocation.model.old.issue.IssueOutStockRemainDo">
		<![CDATA[

					SELECT a.MatCode,a.SizeID,a.StockQty from issue_out_stock_remain a
					left join(
						select matcode,sizeid,sum(NeedStockQty-TotalStockQty) as needTotalStockQty
						from issue_need_stock
						where ShopId=#{shopId} AND TaskId=${taskId} AND Status = 2 and NeedStockQty-TotalStockQty>0
						group by matcode,sizeid
					) b on a.matcode=b.matcode and a.sizeid=b.sizeid
					where a.TaskId=${taskId} AND a.Status = 2 and (a.StockQty-b.needTotalStockQty)<0

		]]>
	</select>

	<insert id="addRecalcEnoughStockSku">
		insert into issue_detail(TaskId,InShopID,MatCode,SizeID,SizeName,Qty,PackageQty,CategoryName,MidCategoryName,QuotePrice,NeedQty,OrderPackage,MinPackageQty,SmallCategoryName,MatName,Status,IsEno,PercentCategory)
		select
			a.TaskId,a.ShopID,a.MatCode,a.SizeID,a.SizeName,
			(a.NeedStockQty-a.TotalStockQty) AS Qty,
			round((a.NeedStockQty-a.TotalStockQty)/b.MinPackageQty) * b.MinPackageQty as PackageQty,
			a.CategoryName,a.MidCategoryName,
			ddg.QuotePrice,
			(a.NeedStockQty-a.TotalStockQty) NeedQty,
			round((a.NeedStockQty-a.TotalStockQty)/b.MinPackageQty) AS OrderPackage,
			b.MinPackageQty,b.SmallCategoryName,b.MatName,2,1,a.PercentCategory
		from issue_need_stock a
		left join goods_info b on a.MatCode=b.MatCode
		LEFT JOIN dws_dim_goods ddg ON a.MatCode = ddg.MatCode
		where a.shopId = #{shopId} and a.taskId=#{taskId} AND a.matcode='${matCode}' and a.sizeId='${sizeId}' AND a.Status = 2 and (a.NeedStockQty-a.TotalStockQty) > 0
	</insert>

	<insert id="addRecalcNotEnoughStockSku">
		insert into issue_detail(TaskId,InShopID,MatCode,SizeID,SizeName,Qty,PackageQty,CategoryName,MidCategoryName,QuotePrice,NeedQty,OrderPackage,MinPackageQty,SmallCategoryName,MatName,Status,PercentCategory)
		select
		a.TaskId,a.ShopID,a.MatCode,a.SizeID,a.SizeName,
		${stockQty} as Qty,
		round(${stockQty}/c.MinPackageQty) * c.MinPackageQty as PackageQty,
		a.CategoryName,a.MidCategoryName,
		ddg.QuotePrice,
		(a.NeedStockQty-a.TotalStockQty) as NeedQty,
		round(${stockQty}/c.MinPackageQty) OrderPackage,
		c.MinPackageQty,c.SmallCategoryName,c.MatName,2,a.PercentCategory
		from issue_need_stock a
		LEFT JOIN goods_info c on a.MatCode=c.MatCode
		LEFT JOIN dws_dim_goods ddg ON a.MatCode = ddg.MatCode
		where a.shopId = #{shopId} AND a.matcode='${matCode}' and a.sizeId='${sizeId}' and a.taskId=${taskId} AND a.Status = 2 and (a.NeedStockQty-a.TotalStockQty) > 0
	</insert>

	<select id="getIssueRecalcUndoData" resultType="cn.nome.saas.allocation.model.old.issue.IssueUndoData">
		<![CDATA[

			SELECT ud.TaskId,ud.ShopID AS InShopID,ud.MatCode,ud.SizeID,ud.SizeName,ud.QuotePrice,ud.IsNew,ud.IsProhibited,
			ud.AvgSaleQty,ud.StockQty,ud.TotalStockQty,
			gi.MinPackageQty,gi.CategoryName,gi.MidCategoryName,gi.SmallCategoryName,gi.MatName,
			ios.StockQty OutStockQty,
			ud.YearNo, ud.SeasonName, ud.PathStockQty, ud.MoveQty,
			ud.RuleName, ud.MinQty,ud.Status, ud.IsEliminate
			FROM(
				SELECT TaskId,ShopID,MatCode,SizeID,SizeName,QuotePrice,IsNew,IsProhibited,AvgSaleQty,StockQty,TotalStockQty, YearNo, SeasonName, PathStockQty, MoveQty, RuleName, MinQty,Status, IsEliminate
				FROM issue_in_stock iis
				WHERE ShopID= '${shopId}' AND TaskId = #{taskId} AND Status = 2
				AND (
					SELECT COUNT(1) AS num FROM issue_detail isd
					WHERE isd.InShopID = iis.ShopID AND isd.MatCode = iis.MatCode AND isd.SizeID = iis.SizeID AND isd.TaskId = iis.TaskId AND isd.Status = 2
				) = 0
			) ud
			LEFT JOIN issue_out_stock_remain ios ON ud.MatCode = ios.MatCode AND ud.SizeID = ios.SizeID AND ud.TaskId = ios.TaskId AND ios.Status = 2
			LEFT JOIN goods_info gi ON ud.MatCode = gi.MatCode
			WHERE gi.CategoryName IS NOT NULL AND gi.MatName IS NOT NULL

		]]>
	</select>

	<update id="invalidIssueGoodsData">
		update issue_goods_data
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 0
	</update>

	<update id="validIssueGoodsData">
		update issue_goods_data
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 2
	</update>

	<update id="invalidIssueCategoryData">
		update issue_category_data
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 0
	</update>

	<update id="validIssueCategoryData">
		update issue_category_data
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 2
	</update>

	<update id="invalidIssueDetail">
		update issue_detail
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND Status = 0
	</update>

	<update id="validIssueDetail">
		update issue_detail
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND Status = 2
	</update>

	<update id="invalidIssueInStock">
		update issue_in_stock
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 0
	</update>

	<update id="validIssueInStock">
		update issue_in_stock
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 2
	</update>

	<update id="invalidIssueMidCategoryQty">
		update issue_mid_category_qty
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 0
	</update>

	<update id="validIssueMidCategoryQty">
		update issue_mid_category_qty
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 2
	</update>

	<update id="invalidIssueMidCategoryData">
		update issue_midcategory_data
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 0
	</update>

	<update id="validIssueMidCategoryData">
		update issue_midcategory_data
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 2
	</update>

	<update id="invalidIssueNeedStock">
		update issue_need_stock
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 0
	</update>

	<update id="validIssueNeedStock">
		update issue_need_stock
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = 2
	</update>

	<update id="invalidIssueOutStockRemain">
		update issue_out_stock_remain
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND Status = 0
	</update>

	<update id="validIssueOutStockRemain">
		update issue_out_stock_remain
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND Status = 2
	</update>

	<update id="invalidIssueUndo">
		update issue_undo
		<set>
			Status = 1
		</set>
		WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND Status = 0
	</update>

	<update id="validIssueUndo">
		update issue_undo
		<set>
			Status = 0
		</set>
		WHERE TaskId = #{taskId} AND InShopID = #{shopId} AND Status = 2
	</update>

	<update id="deductStockRemain">
		update issue_out_stock_remain
		<set>
			StockQty = #{stockQty}
		</set>
		WHERE ID = #{id}
	</update>

	<select id="getIssueNeedStockList" resultType="cn.nome.saas.allocation.model.old.allocation.Stock">
		select ShopID, MatCode, SizeID, PercentCategory from issue_need_stock WHERE TaskId = #{taskId} AND ShopID = #{shopId} AND Status = #{status} order by CreatedAt desc
  	</select>

</mapper>