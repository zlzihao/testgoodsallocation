<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.old.allocation.dao.TaskMapper2" >

	<insert id="create_task">
		insert into task(name,task_status,type,right_now,clothing_period,commodity_period,user_id,user_name,run_time,created_at,updated_at,area_type,in_shop_ids,out_shop_ids,allocation_type,days) values
	              (#{task_name},1,#{task_type},#{right_now},#{clothing_period},#{commodity_period},#{user_id},#{user_name},#{run_time},now(),now(),#{area_type},#{in_shop_ids},#{out_shop_ids},#{allocation_type},#{days})
	</insert>

  <resultMap id="Task" type="cn.nome.saas.allocation.model.old.allocation.Task" >
    <result column="id" property="task_id" jdbcType="INTEGER" />
    <result column="name" property="task_name" jdbcType="VARCHAR" />
    <result column="task_status" property="task_status" jdbcType="INTEGER" />
    <result column="type" property="task_type" jdbcType="INTEGER" />
    <result column="allocation_type" property="allocation_type" jdbcType="INTEGER" />
    <result column="clothing_period" property="clothing_period" jdbcType="INTEGER" />
    <result column="commodity_period" property="commodity_period" jdbcType="INTEGER" />
    <result column="days" property="days" jdbcType="INTEGER" />
    <result column="user_id" property="user_id" jdbcType="VARCHAR" />
    <result column="user_name" property="user_name" jdbcType="VARCHAR" />
    <result column="created_at" property="create_time" jdbcType="TIMESTAMP" />
    <result column="run_time" property="run_time" jdbcType="TIMESTAMP" />
  </resultMap>

  <resultMap id="TaskStore" type="cn.nome.saas.allocation.model.old.allocation.TaskStore" >
    <result column="shopid" property="shop_id" jdbcType="VARCHAR" />
    <result column="shopname" property="shop_name" jdbcType="VARCHAR" />
    <result column="quantity" property="commodity_num" jdbcType="INTEGER" />
    <result column="price" property="commodity_price" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="TaskStore2" type="cn.nome.saas.allocation.model.old.allocation.TaskStore2" >
    <result column="inshopid" property="inshop_id" jdbcType="VARCHAR" />
    <result column="outshopid" property="outshop_id" jdbcType="VARCHAR" />
    <result column="quantity" property="commodity_num" jdbcType="INTEGER" />
    <result column="price" property="commodity_price" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="DBArea" type="cn.nome.saas.allocation.model.old.allocation.DBArea" >
    <result column="provincecode" property="province_code" jdbcType="VARCHAR" />
    <result column="provincename" property="province_name" jdbcType="VARCHAR" />
    <result column="citycode" property="city_code" jdbcType="VARCHAR" />
    <result column="cityname" property="city_name" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="Store" type="cn.nome.saas.allocation.model.old.allocation.Store" >
    <result column="shopid" property="shop_id" jdbcType="VARCHAR" />
    <result column="shopcode" property="shop_code" jdbcType="VARCHAR" />
    <result column="shopname" property="shop_name" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="TaskStoreCommodity" type="cn.nome.saas.allocation.model.old.allocation.TaskStoreCommodity" >
    <result column="matcode" property="commodity_id" jdbcType="VARCHAR" />
    <result column="matname" property="commodity_name" jdbcType="VARCHAR" />
    <result column="quantity" property="commodity_num" jdbcType="INTEGER" />
    <result column="inshopid" property="inshop_id" jdbcType="VARCHAR" />
    <result column="shopid" property="outshop_id" jdbcType="VARCHAR" />
    <result column="sizeid" property="size_id" jdbcType="VARCHAR" />
  </resultMap>

	<select id="get_store_list" resultMap="Store">
	    SELECT shopid,shopcode,shopname FROM `dws_dim_shop`
	</select>
	<select id="get_area_list" resultMap="DBArea">
        SELECT provincecode,provincename,citycode,cityname FROM `dws_dim_shop` group by provincecode,provincename,citycode,cityname order by provincename
	</select>	
	<select id="get_task_list" resultMap="Task">
	    select id,name,task_status,type,clothing_period,commodity_period,user_id,user_name,created_at,run_time,allocation_type,days from task order by created_at desc
        <if test="page != null">
    	    limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
        </if>
	</select>	
	<select id="select_task_num" resultType="INTEGER">
	    select count(*) from task
	</select>		
	<select id="get_running_task_list" resultMap="Task">
	    select id,name from task where task_status = 2
	</select>
	<select id="get_need_to_run_task_list" resultMap="Task">
	  <![CDATA[
		select * from(
		select * from task where task_status=1 and run_time >=DATE_SUB(NOW(),INTERVAL 180 MINUTE) and run_time < now()
		union select * from  task where task_status=2 and run_time >=DATE_SUB(NOW(),INTERVAL 100 MINUTE)
		) aa order by aa.task_status desc, aa.run_time asc
	  ]]>
	</select>
	<select id="get_task" resultMap="Task">
	    select id,name,task_status,type,user_id,user_name,created_at,run_time from task where id = #{task_id}
	</select>
	<select id="get_task_by_id" resultMap="Task">
	    select id,name,task_status,type,user_id,user_name,created_at,run_time from task where id = #{task_id}
	</select>
    <update id="cancel_task">
        update task set task_status = 4 where id = #{task_id}
    </update>
<!-- 
	<select id="get_task_store_list2" resultMap="TaskStore2">
        select u.inshopid as inshopid,u.shopid as outshopid,sum(u.qty) as quantity,sum(u.quoteprice * u.qty) as price from allocation_detail as u inner join dws_dim_shop as v on u.inshopid = v.shopid where u.taskid = #{task_id}
        <if test="area_code != 'ALL'">
            and (v.provincecode = #{area_code} or v.citycode = #{area_code})
        </if> 
        group by u.inshopid,u.shopid having price > #{price_threshold} order by price desc      
	</select>
-->
	<select id="get_task_store_list2" resultMap="TaskStore2">
        select w.inshopid as inshopid,w.shopid as outshopid,sum(w.qty) as quantity,sum(w.skc_price) as price from 
        (select u.matcode,u.inshopid,u.shopid,u.qty,u.quoteprice * u.qty as skc_price,v.shopname from allocation_detail as u inner join dws_dim_shop as v on u.inshopid = v.shopid where u.taskid = #{task_id}
        <if test="area_code != 'ALL'">
            and (v.provincecode = #{area_code} or v.citycode = #{area_code})
        </if> 
        ) as w inner join dws_dim_goods on w.matcode = dws_dim_goods.matcode and 2 > 1
        <if test="year != 'ALL'">
            and dws_dim_goods.yearno = #{year}
        </if> 
        <if test="season != 'ALL'">
            and dws_dim_goods.seasonno = #{season}
        </if>    
        group by w.inshopid,w.shopid having price > #{price_threshold} and quantity > #{quantity_threshold} order by price desc      
	</select>	

<!-- 
	<select id="get_task_input_store_list" resultMap="TaskStore">
        select u.inshopid as shopid,v.shopname as shopname,count(distinct(u.ShopID)) as shopqty,sum(u.qty) as quantity,sum(u.quoteprice * u.qty) as price from allocation_detail as u inner join dws_dim_shop as v on u.inshopid = v.shopid where u.taskid = #{task_id}
        <if test="area_code != 'ALL'">
            and (v.provincecode = #{area_code} or v.citycode = #{area_code})
        </if> 
        group by u.inshopid,v.shopname having price > #{price_threshold} and quantity > #{quantity_threshold} order by price desc      
	</select>	
--> 

	<select id="get_task_input_store_list" resultMap="TaskStore">
        select w.inshopid as shopid,w.shopname as shopname,count(distinct(w.ShopID)) as shopqty,sum(w.qty) as quantity,sum(w.skc_price) as price from 
        (select u.matcode,u.inshopid,u.shopid,u.qty,u.quoteprice * u.qty as skc_price,v.shopname from allocation_detail as u inner join dws_dim_shop as v on u.inshopid = v.shopid where u.taskid = #{task_id}
        <if test="area_code != 'ALL'">
            and (v.provincecode = #{area_code} or v.citycode = #{area_code})
        </if>
        ) as w inner join dws_dim_goods on w.matcode = dws_dim_goods.matcode and 2 > 1
        <if test="year != 'ALL'">
            and dws_dim_goods.yearno = #{year}
        </if> 
        <if test="season != 'ALL'">
            and dws_dim_goods.seasonno = #{season}
        </if>      
        group by w.inshopid,w.shopname having price > #{price_threshold} and quantity > #{quantity_threshold} order by price desc      
	</select>	

<!-- 
	<select id="get_task_output_store_list" resultMap="TaskStore">
        select u.shopid as shopid,v.shopname as shopname,count(distinct(u.InShopID)) as shopqty,sum(u.qty) as quantity,sum(u.quoteprice * u.qty) as price from allocation_detail as u inner join dws_dim_shop as v on u.shopid = v.shopid where u.taskid = #{task_id} 
        <if test="area_code != 'ALL'">
            and (v.provincecode = #{area_code} or v.citycode = #{area_code})
        </if> 
        group by u.shopid,v.shopname having price > #{price_threshold} and quantity > #{quantity_threshold} order by price desc
	</select>
-->

	<select id="get_task_output_store_list" resultMap="TaskStore">
        select w.shopid as shopid,w.shopname as shopname,count(distinct(w.InShopID)) as shopqty,sum(w.qty) as quantity,sum(w.skc_price) as price from 
        (select u.matcode,u.inshopid,u.shopid,u.qty,u.quoteprice * u.qty as skc_price,v.shopname from allocation_detail as u inner join dws_dim_shop as v on u.shopid = v.shopid where u.taskid = #{task_id} 
        <if test="area_code != 'ALL'">
            and (v.provincecode = #{area_code} or v.citycode = #{area_code})
        </if>
        ) as w inner join dws_dim_goods on w.matcode = dws_dim_goods.matcode and 2 > 1
        <if test="year != 'ALL'">
            and dws_dim_goods.yearno = #{year}
        </if> 
        <if test="season != 'ALL'">
            and dws_dim_goods.seasonno = #{season}
        </if>      
        group by w.shopid,w.shopname having price > #{price_threshold} and quantity > #{quantity_threshold} order by price desc
	</select>
<!-- 
	<select id="get_task_input_store_commodity_list" resultMap="TaskStoreCommodity">
        select a.inshopid as inshopid,a.shopid as shopid,a.matcode as matcode,a.sizeid as sizeid,b.matname as matname,a.qty as quantity from ((select inshopid,shopid,matcode,sizeid,qty from allocation_detail where taskid = #{task_id} and inshopid in 
       <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
           #{item}
       </foreach>
        ) as a inner join dws_dim_goods as b on a.matcode = b.matcode)        
       <if test="page != null">
    	   limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
       </if>
    </select>
-->
	<select id="get_task_input_store_commodity_list" resultMap="TaskStoreCommodity">
        select a.inshopid as inshopid,a.shopid as shopid,a.matcode as matcode,a.sizeid as sizeid,b.matname as matname,a.qty as quantity from 
        ((select inshopid,shopid,matcode,sizeid,qty from allocation_detail where taskid = #{task_id} and inshopid in 
       <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
           #{item}
       </foreach>
        ) as a inner join dws_dim_goods as b on a.matcode = b.matcode and 2 > 1
        <if test="year != 'ALL'">
            and b.yearno = #{year}
        </if> 
        <if test="season != 'ALL'">
            and b.seasonno = #{season}
        </if>          
        )        
       <if test="page != null">
    	   limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
       </if>
    </select>
    
	<select id="select_task_input_store_commodity_num" resultType="INTEGER">
        select count(1) from ((select inshopid,shopid,matcode,qty from allocation_detail where taskid = #{task_id} and inshopid in 
       <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
           #{item}
       </foreach>
        ) as a inner join dws_dim_goods as b on a.matcode = b.matcode and 2 > 1
        <if test="year != 'ALL'">
            and b.yearno = #{year}
        </if> 
        <if test="season != 'ALL'">
            and b.seasonno = #{season}
        </if>          
        )      
    </select>

	<select id="get_task_output_store_commodity_list" resultMap="TaskStoreCommodity">
        select a.inshopid as inshopid,a.shopid as shopid,a.matcode as matcode,a.sizeid as sizeid,b.matname as matname,a.qty as quantity from ((select inshopid,shopid,matcode,sizeid,qty from allocation_detail where taskid = #{task_id} and shopid in 
       <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
           #{item}
       </foreach>
        ) as a inner join dws_dim_goods as b on a.matcode = b.matcode and 2 > 1
        <if test="year != 'ALL'">
            and b.yearno = #{year}
        </if> 
        <if test="season != 'ALL'">
            and b.seasonno = #{season}
        </if> 
        )        
       <if test="page != null">
    	   limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
       </if>
    </select>

	<select id="select_task_output_store_commodity_num" resultType="INTEGER">
        select count(1) from ((select inshopid,shopid,matcode,qty from allocation_detail where taskid = #{task_id} and shopid in 
       <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
           #{item}
       </foreach>
        ) as a inner join dws_dim_goods as b on a.matcode = b.matcode and 2 > 1
        <if test="year != 'ALL'">
            and b.yearno = #{year}
        </if> 
        <if test="season != 'ALL'">
            and b.seasonno = #{season}
        </if>          
        )    
    </select>
    
	<select id="get_task_store_pair_commodity_list" resultType="cn.nome.saas.allocation.model.old.allocation.TaskStoreCommodity">
        		select 
						a.inshopid as inshop_id,a.shopid as outshop_id,a.matcode as commodity_id,a.sizeid as size_id,a.qty as commodity_num,
						a.inAvgSaleAmt as inAvgSaleAmt,a.inAvgSaleQty as inAvgSaleQty,a.inStockQty as inStockQty,a.inPathStockQty as inPathStockQty,a.inIsComplement as inIsComplement,a.inMoveQty as inMoveQty,a.inNeedStockQty as inNeedStockQty,
						a.outAvgSaleAmt as outAvgSaleAmt,a.outAvgSaleQty as outAvgSaleQty,a.outStockQty as outStockQty,
						b.SeasonName as seasonName,b.YearNo as yearNo,b.matname as commodity_name
				from allocation_detail a
        		INNER join dws_dim_goods b on a.matcode = b.matcode
				where a.taskid =#{task_id} and a.inshopid = #{inshop_id} and a.shopid = #{outshop_id}
				        	<if test="year != 'ALL'">
					            and b.yearno = #{year}
					        </if> 
					        <if test="season != 'ALL'">
					            and b.seasonno = #{season}
					        </if>
    </select>
	
	<update id="update_running_task">
        update task set task_status = 2 where id = #{task_id} and task_status=1
    </update>
	<update id="update_finish_task">
        update task set task_status = 3 where id = #{task_id}
    </update>
   
   	<insert id="create_task_progress">
		insert into task_progress(task_id,progress,minute,message,created_at,updated_at) values
	              (#{task_id},#{progress},#{minute},#{message},now(),now())
	</insert>

	<select id="getShopIds" resultType="java.lang.String">
        select ShopID from dws_dim_shop where ShopCode in
       <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
           #{item}
       </foreach>
    </select>
    
</mapper>