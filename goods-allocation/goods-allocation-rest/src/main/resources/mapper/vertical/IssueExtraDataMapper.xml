<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.dao.vertical.IssueExtraDataMapper" >


    <select id="getIssueInStockList" resultType="cn.nome.saas.allocation.repository.entity.vertical.IssueInStockDO">
			select cc.Categorycode as categoryCode,aa.ShopID as shopID,aa.MatCode as matCode,
              aa.SizeID as sizeID,bb.SizeName as sizeName,aa.AvgSaleQty as avgSaleQty,bb.StockQty as stockQty,bb.PathStockQty as pathStockQty,MoveQty as moveQty,cc.QuotePrice as quotePrice
			from (
					select * from aps.aps_effect_28daily_saleqty where updatetime=date(now())-1
			)aa
			left join dws.dws_stok_sku_d bb on aa.ShopID= bb.ShopID and bb.OperationDate= date(now())-1 and aa.MatCode=bb.MatCode and aa.SizeID=bb.SizeID
			left join dws.dws_saleStockMove_d cccc on date(cccc.billdate)= date(now())-1 and aa.ShopID=cccc.ShopID and aa.MatCode=cccc.MatCode and aa.SizeID=cccc.SizeID
			left join dws.dws_dim_goods cc on aa.Matcode = cc.Matcode
			where AvgSaleQty >= 0
			<if test="type == 1 ">
              and cc.Categorycode in ('W','M')
            </if>
            <if test="type == 2 ">
              and cc.Categorycode not in ('W','M')
            </if>
    </select>

	<select id="getNewSkcList" resultType="cn.nome.saas.allocation.repository.entity.vertical.IssueInStockDO">
		<![CDATA[
				select a.ShopID as shopID,a.MatCode as matCode ,a.SizeID as sizeID,c.MidCategoryCode as categoryCode,d.SizeName  as sizeName from(
				        select b.ShopID,a.Matcode,a.SizeId from(
				                select a.Matcode,b.SizeId,b.StockQty from(
				                        /*select MatCode from dws.dws_dim_goods where Prosaledate > date(now())-60 */
				                        select MatCode from (
                                            select g.MatCode,
                                            max(case when isnull(g.Prosaledate,'1900-01-01')>isnull(d.firstInStockDate,'1900-01-01')
                                            then isnull(g.Prosaledate,'1900-01-01') else isnull(d.firstInStockDate,'1900-01-01') end) as max_date
                                            from dws.dws_dim_goods g
                                            left join dws.dws_label_sku_firstInStockDate d on g.matcode = d.matcode
                                            group by g.MatCode
                                        )a where max_date > date(now())-60
				                        union(
				                        select MatCode from(
				                                select MatCode,SizeID,round(sum(SaleAmt)/28,2) AvgSaleAmt,round(sum(SaleQty)/28,2) AvgSaleQty
				                                from dws.dws_sale_sku_d
				                                where OperationDate>=date(now())-28
				                                group by MatCode,SizeID
				                        ) a order by AvgSaleQty desc limit 300
				                        )
				                ) a left join (
				                         select MatCode, SizeID,sum(StockQty) StockQty
				                         from dws.dws_stok_sku_d
				                         where stockID in('NM000353','NM000001','NM001275') and OperationDate= date(now())-1
				                         group by MatCode, SizeID having sum(StockQty)>0
				                ) b on a.Matcode=b.Matcode where b.SizeId is not null
				        )a ,  (select distinct(shopid) as shopId from dws.dws_stock_shop_d where OperationDate= date(now())-1)b
				) a
				left join dws.dws_stok_sku_d b on a.shopid=b.shopid and a.matcode=b.matcode and a.sizeid=b.sizeid and b.OperationDate= date(now())-1
				left join dws.dws_dim_goods c on a.matcode= c.matcode
				left join dwd.dwd_base_mat_size d on a.sizeid= d.sizeid and d.etldate=date(now())-1
				where b.stockqty is null and a.shopid is not null
  ]]>
	</select>

	<select id="getIssueOutStockList" resultType="cn.nome.saas.allocation.repository.entity.vertical.IssueOutStockDO">
		<![CDATA[
                                 select MatCode as matCode, SizeID as sizeID ,sum(StockQty) stockQty
                                 from dws.dws_stok_sku_d
                                 where stockID in('NM000353','NM000001','NM001275') and OperationDate= date(now())-1
                                 group by MatCode, SizeID having sum(StockQty)>0
  ]]>
	</select>


	<select id="getIssueRejectSupplyList" resultType="cn.nome.saas.allocation.repository.entity.vertical.IssueRejectSupplyDO">
			select
			 	ssd.shopID as shopId,ssd.MatCode as matCode,ssd.SizeID as sizeId, ssd.StockQty + ssd.PathStockQty + smd.moveQty as supplyStockQty
			from
			(select
				shopID as shopId,MatCode as matCode, SizeID as sizeId, StockQty, PathStockQty
			from
				dws.dws_stok_sku_d
			where
				OperationDate= date(now())-1
				<foreach collection="shopIdList" open="and shopID in ("  close=")" separator="," item="shopId">
                    #{shopId}
                </foreach>
            ) ssd
			left join
			(select
				shopID, MatCode, SizeID, moveQty from dws.dws_saleStockMove_d
			where
				date(billdate) = date(now())-1
				<foreach collection="shopIdList" open="and shopID in ("  close=")" separator="," item="shopId">
                    #{shopId}
                </foreach>
			) smd
			on
				ssd.shopId = smd.shopId and ssd.MatCode = smd.MatCode and ssd.SizeID = smd.SizeID
			where
				ssd.StockQty + ssd.PathStockQty + smd.moveQty > 0
	</select>




</mapper>