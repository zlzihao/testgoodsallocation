<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.dao.allocation.QdIssueDOMapper" >

    <insert id="addTask" useGeneratedKeys="true" keyColumn="id" keyProperty="task.id" parameterType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueTaskDO">
        insert into qd_issue_task(name,task_status,run_time,created_at,updated_at,remark,operator) values
        (#{task.name},#{task.taskStatus},#{task.runTime},#{task.createdAt},#{task.updatedAt},#{task.remark},#{task.operator})
    </insert>


    <insert id="batchInsertOutStock" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.List" >
        insert into qd_issue_out_stock
        (task_id,category_name,mid_category_name,mat_code,size_id,stock_qty,path_qty,created_at)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.taskId},#{item.categoryName},#{item.midCategoryName},#{item.matCode},#{item.sizeId},#{item.stockQty},#{item.pathQty},now())
        </foreach>

    </insert>


    <insert id="batchInsertInStock" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.List" >
        insert into qd_issue_in_stock
        (task_id,shop_id,category_name,mid_category_name,mat_code,size_id,size_name,stock_qty,path_qty,apply_qty,created_at,is_news)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.taskId},#{item.shopId},#{item.categoryName},#{item.midCategoryName},#{item.matCode},#{item.sizeId},#{item.sizeName},#{item.stockQty},#{item.pathQty},#{item.applyQty},now(),#{item.isNews})
        </foreach>

    </insert>

    <insert id="batchInsertSkcStock" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.List" >
        insert into qd_issue_skc_stock
        (task_id,shop_id,category_name,mid_category_name,male_standard_skc,female_standard_skc,old_skc_percentage_suggest,mid_category_suggest_skc_percent,
         mid_category_suggest_skc,mid_category_sales_skc,mid_category_apply_skc,mid_category_path_skc,mid_category_issue_skc,created_at
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.taskId},#{item.shopId},#{item.categoryName},#{item.midCategoryName},#{item.maleStandardSkc},#{item.femaleStandardSkc},#{item.oldSkcPercentageSuggest}
            ,#{item.midCategorySuggestSkcPercent},#{item.midCategorySkc},#{item.midCategorySalesSkc},#{item.midCategoryApplySkc},#{item.midCategoryPathSkc},#{item.midCategoryIssueSkc},now())
        </foreach>
    </insert>

    <insert id="batchInsertNewSkcStock" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.List" >
        insert into qd_issue_new_skc_stock
        (task_id,shop_id,new_suggest_skc,shop_sales_skc,shop_apply_skc,shop_path_skc,new_issue_skc,created_at)
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.taskId},#{item.shopId},#{item.newSuggestSkc},#{item.shopSalesSkc},#{item.shopApplySkc},#{item.shopPathSkc},#{item.newIssueSkc},now())
        </foreach>
    </insert>

    <delete id="deleteInStock" parameterType="java.lang.Integer">
        DELETE FROM qd_issue_in_stock where task_id = #{taskId}
    </delete>

    <delete id="deleteOutStock" parameterType="java.lang.Integer">
        DELETE FROM qd_issue_out_stock where task_id = #{taskId}
    </delete>

    <delete id="deleteSkcStock" parameterType="java.lang.Integer">
        DELETE FROM qd_issue_skc_stock where task_id = #{taskId}
    </delete>

    <delete id="deleteNewSkcStock" parameterType="java.lang.Integer">
        DELETE FROM qd_issue_new_skc_stock where task_id = #{taskId}
    </delete>

    <update id="batchUpdateInStockRequirement" parameterType="java.util.List">
        <foreach collection="list" item="bean" index="index" open="" close="" separator=";">
            UPDATE qd_issue_in_stock
            <set>
                ideal_qty=#{bean.idealQty}, demand_qty = #{bean.demandQty}
            </set>
            <where>
                id = #{bean.id}
            </where>
        </foreach>
    </update>

    <update id="UpdateInStockRequirement" parameterType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueInStockDO">
            UPDATE qd_issue_in_stock
            <set>
                ideal_qty=#{bean.idealQty}, demand_qty = #{bean.demandQty}
            </set>
            <where>
                id = #{bean.id}
            </where>
    </update>

    <select id="getInStockData" resultType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueInStockDO">
        select stock.id as id,stock.task_id as taskId,stock.shop_id as shopId,stock.mat_code as matCode,
        stock.size_id as sizeId,stock.size_name as sizeName,stock.stock_qty as stockQty,stock.path_qty as pathQty,stock.apply_qty as applyQty,
        is_news as isNews,category_name as categoryName,mid_category_name as midCategoryName,size_id as sizeId
        from qd_issue_in_stock stock
        where stock.task_id = #{taskId} and  stock.is_news = 0
        and stock.shop_id in (
        <foreach collection="shopIdList" item="shopId" index="index" separator=",">
            #{shopId}
        </foreach>
        )
        <foreach collection="matCodeList" open="and stock.mat_code in ("  close=")" separator="," item="matCode">
            #{matCode}
        </foreach>

        order by stock.shop_id,stock.mat_code,stock.size_id ASC
    </select>

    <select id="getNewInStockData" resultType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueInStockDO">
         select stock.id as id,stock.task_id as taskId,stock.shop_id as shopId,stock.mat_code as matCode,
        stock.size_id as sizeId,stock.size_name as sizeName,stock.stock_qty as stockQty,stock.path_qty as pathQty,stock.apply_qty as applyQty,
        is_news as isNews,category_name as categoryName,mid_category_name as midCategoryName,size_id as sizeId
        from qd_issue_in_stock stock
        where stock.task_id = #{taskId} and stock.is_news = 1
        <if test="shopIdList != null">
        and stock.shop_id in (
        <foreach collection="shopIdList" item="shopId" index="index" separator=",">
            #{shopId}
        </foreach>
        )
        </if>
    </select>

    <select id="getInStockQty" resultType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueInStockDO">
        select stock.id as id,stock.shop_id as shopId,stock.mat_code as matCode,
        stock.size_id as sizeId,stock.size_name as sizeName,stock.stock_qty as stockQty,stock.path_qty as pathQty,stock.apply_qty as applyQty,stock.demand_qty as demandQty
        from qd_issue_in_stock stock
        where stock.mat_code = #{matCode} and stock.task_id = #{taskId}
        and stock.demand_qty > 0
        order by shop_id,mat_code
    </select>


    <select id="getOutStockData" resultType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueOutStockDO">
        select mat_code as matCode,size_id as sizeId,stock_qty as stockQty from qd_issue_out_stock where task_id = #{taskId}
    </select>

    <select id="getSkcStockList" resultType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueSkcStockDO">
        select id,shop_id as shopId,mid_category_name as midCategoryName,mid_category_issue_skc as midCategoryIssueSkc
         from qd_issue_skc_stock where task_id = #{taskId} and mid_category_issue_skc > 0
    </select>

    <select id="getNewSkcStockList" resultType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueNewSkcStockDO">
        select id,shop_id as shopId,new_issue_skc as newIssueSkc
        from qd_issue_new_skc_stock where task_id = #{taskId}
    </select>


    <update id="batchUpdateSkcIssueSkc" parameterType="java.util.List">
        <foreach collection="list" item="bean" index="index" open="" close="" separator=";">
            UPDATE qd_issue_skc_stock
            <set>
                mid_category_had_issue_skc=#{bean.midCategoryHadIssueSkc}
            </set>
            <where>
                id = #{bean.id}
            </where>
        </foreach>
    </update>

    <update id="batchUpdateNewSkcIssueSkc" parameterType="java.util.List">
        <foreach collection="list" item="bean" index="index" open="" close="" separator=";">
            UPDATE qd_issue_new_skc_stock
            <set>
                new_had_issue_skc=#{bean.newHadIssueSkc}
            </set>
            <where>
                id = #{bean.id}
            </where>
        </foreach>
    </update>

    <update id="updateOutStockIssueQty">
        update qd_issue_out_stock
        set issue_qty = #{qty}
        where mat_code = #{matCode} and task_id = #{taskId} and size_id = #{sizeId}
    </update>

    <update id="batchUpdateOutStockIssueQty">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update qd_issue_out_stock
            set issue_qty = #{item.issueQty}
            where mat_code = #{item.matCode} and task_id = #{item.taskId} and size_id = #{item.sizeId}
        </foreach>
    </update>

    <select id="getNewGoodsHadIssueSkc" resultType="cn.nome.saas.allocation.repository.entity.allocation.QdIssueSkcStockDO">
        select detail.shop_id as shopId,detail.mid_category_name as midCategoryName,count(detail.mat_code) as newGoodsHadIssueSkc
        from qd_issue_detail detail,qd_issue_skc_list skc
        where detail.task_id = #{taskId} and detail.mat_code = skc.mat_code
        and skc.is_news = 1
        group by detail.shop_id,detail.mid_category_name
    </select>

</mapper>