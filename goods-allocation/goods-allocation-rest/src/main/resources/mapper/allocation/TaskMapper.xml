<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.dao.allocation.TaskDOMapper" >

    <resultMap id="TaskDOResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.TaskDO" >
        <result column="id" property="taskId" />
        <result column="name" property="taskName" />
        <result column="task_status" property="taskStatus" />
        <result column="task_process" property="taskProcess" />
        <result column="allocation_type" property="allocationType" />
        <result column="type" property="taskType" />
        <result column="right_now" property="rightNow" />
        <result column="close_task_id" property="closeTaskId" />
        <result column="category_names" property="categoryNames" />
        <result column="year" property="year" />
        <result column="season" property="season" />
        <result column="breakable" property="breakable" />
        <result column="in_days" property="inDays" />
        <result column="out_days" property="outDays" />
        <result column="min_allocation_price" property="minAllocationPrice" />
        <result column="max_fee_ratio" property="maxFeeRatio" />
        <result column="in_shop_ids" property="demandShopIds" />
        <result column="out_shop_ids" property="supplyShopIds" />
        <result column="user_id" property="userId" />
        <result column="user_name" property="userName" />
        <result column="run_time" property="runTime" />
        <result column="created_at" property="createTime" />
        <result column="remark" property="remark" />
    </resultMap>

    <resultMap id="TaskStoreDOResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.TaskStoreDO" >
        <result column="shopid" property="shopId" />
        <result column="shopname" property="shopName" />
        <result column="quantity" property="commodityNum" />
        <result column="price" property="commodityPrice" />
        <result column="shopqty" property="shopQty" />
    </resultMap>

    <resultMap id="TaskStoreDOV2ResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.TaskStoreDOV2" >
        <result column="inshopid" property="inShopId" />
        <result column="outshopid" property="outShopId" />
        <result column="quantity" property="commodityNum" />
        <result column="price" property="commodityPrice" />
    </resultMap>


    <select id="getRunningTaskCount" resultType="java.lang.Integer">
        select count(id) from allocation_task where task_status = 2
    </select>

    <select id="selectTaskNum" resultType="INTEGER">
        select count(*) from allocation_task
        where 1= 1
        <if test="allocationType != null">
            and allocation_type = #{allocationType}
        </if>
        <if test="keyword != null">
            and (
              name like concat('%', #{keyword}, '%')
              or user_name like concat('%', #{keyword}, '%')
              or date_format(created_at,'%Y-%m-%d') like concat('%', #{keyword}, '%')
            )
        </if>
    </select>

    <select id="getTaskList" resultMap="TaskDOResultMap">
        select id,name,task_status,task_process,allocation_type,type,right_now,close_task_id,category_names,
        year,season,breakable,in_days,out_days,min_allocation_price,max_fee_ratio,
        in_shop_ids,out_shop_ids,user_id,user_name,created_at,run_time,remark
        from allocation_task
        where 1= 1
        <if test="allocationType != null">
            and allocation_type = #{allocationType}
        </if>
        <if test="keyword != null">
            and (
            name like concat('%', #{keyword}, '%')
            or user_name like concat('%', #{keyword}, '%')
            )
        </if>
        order by created_at desc
        <if test="page != null">
            limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
        </if>
    </select>

    <select id="getNeedRunTaskList" resultMap="TaskDOResultMap">
        <![CDATA[
		select * from(
		select * from allocation_task where task_status=1 and run_time >=DATE_SUB(NOW(),INTERVAL 180 MINUTE) and run_time < now()
		union
		select * from  allocation_task where task_status=2 and run_time >=DATE_SUB(NOW(),INTERVAL 100 MINUTE)
		) aa order by aa.task_status desc, aa.run_time asc
	  ]]>
    </select>

    <select id="getTask" resultMap="TaskDOResultMap">
        select id,name,allocation_type,task_status,type,right_now,close_task_id,category_names,year,season,breakable,in_days,out_days,min_allocation_price,max_fee_ratio,in_shop_ids,out_shop_ids,user_id,user_name,created_at,run_time,remark
    from allocation_task
    where id = #{task_id}
    </select>

    <select id="checkTaskName" resultType="INTEGER">
        select count(*) from allocation_task
        where name = #{name}
    </select>

    <select id="getCloseTaskList" resultType="cn.nome.saas.allocation.model.allocation.Paramater">
         <![CDATA[
        select id  as 'key',name  as 'value'  from allocation_task
        where allocation_type = 4 and date_format(run_time,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d') and task_status = 3
        order by run_time desc
        ]]>
    </select>

    <select id="getTaskProgress" resultType="cn.nome.saas.allocation.repository.entity.allocation.TaskProgressDO">
        select *,created_at as createdTime,task_id as taskId from task_progress where task_id=${taskId} order by created_at asc
    </select>

    <select id="selectAllRejectTask" resultType="java.lang.Integer">
        <![CDATA[
        select id from allocation_task where out_shop_ids in (
          select out_shop_ids from allocation_task where id = #{taskId}
        ) and date_format(run_time,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')  and run_time <= now()
        and allocation_type = 4 and id <= #{taskId}
        ]]>
    </select>

    <update id="cancelTask">
        update allocation_task set task_status = 4 where id = #{taskId}
    </update>

    <insert id="createTask" useGeneratedKeys="true" keyProperty="taskId" parameterType="cn.nome.saas.allocation.repository.entity.allocation.TaskDO">
        insert into allocation_task
        (
         name,task_status,task_process,allocation_type,type,right_now,close_task_id,category_names,
         year,season,breakable,in_days,out_days,min_allocation_price,max_fee_ratio,
         user_id,user_name,run_time,created_at,updated_at,area_type,in_shop_ids,out_shop_ids
        )
        values
        (
        #{taskName},1,0,#{allocationType},#{taskType},#{rightNow},#{closeTaskId},#{categoryNames},
        #{year},#{season},#{breakable},#{inDays},#{outDays},#{minAllocationPrice},#{maxFeeRatio},
        #{userId},#{userName},#{runTime},now(),now(),#{areaType},#{demandShopIds},#{supplyShopIds}
        )
    </insert>

    <update id="updateTask" parameterType="cn.nome.saas.allocation.repository.entity.allocation.TaskDO">
        <![CDATA[
        update allocation_task
        set
        name = #{taskName},
        allocation_type = #{allocationType},
        type = #{taskType},
        task_status = 1,
        task_process = 0,
        remark = '',
        right_now = #{rightNow},
        close_task_id = #{closeTaskId},
        category_names = #{categoryNames},
        year = #{year},
        season = #{season},
        breakable = #{breakable},
        in_days = #{inDays},
        out_days = #{outDays},
        min_allocation_price = #{minAllocationPrice},
        max_fee_ratio = #{maxFeeRatio},
        run_time = #{runTime},
        in_shop_ids = #{demandShopIds},
        out_shop_ids = #{supplyShopIds}
        where id = #{taskId}
        ]]>
    </update>

    <update id="updateTaskToRunning">
        update allocation_task set task_status = 2,task_process = 0,updated_at=now(),remark='' where id = #{taskId}
    </update>
    <update id="updateTaskToFinish">
        update allocation_task set task_status = 3,task_process = 100,updated_at=now(),remark='' where id = #{taskId}
    </update>
    <update id="updateTaskToFail">
        update allocation_task set task_status = 0,task_process = 0,updated_at=now(),remark=#{remark} where id = #{taskId}
    </update>

    <update id="updateTaskProcess">
        update allocation_task set task_process = #{process},updated_at=now() where id = #{taskId}
    </update>

</mapper>