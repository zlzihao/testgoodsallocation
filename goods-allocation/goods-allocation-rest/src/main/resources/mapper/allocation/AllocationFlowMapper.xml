<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.dao.allocation.AllocationFlowDOMapper" >

    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.List" >

        insert into allocation_flow
        (
          task_id,demand_shop_id,demand_shop_name,supply_shop_id,supply_shop_name,allocation_qty,fee,rate,demand_amount,allocation_amount,match_order,match_flag,fail_reason,created_at
        )
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.taskId},#{item.demandShopId},#{item.demandShopName},#{item.supplyShopId},#{item.supplyShopName},#{item.allocationQty},#{item.fee},#{item.rate},#{item.demandAmount},#{item.allocationAmount},#{item.matchOrder},#{item.matchFlag},#{item.failReason},now()
            )
        </foreach>

    </insert>

    <update id="batchUpdate" parameterType="java.util.List" >
        <foreach collection="list" item="record" index="index" open="" close="" separator=";">
            update allocation_flow
            <set >
                allocation_qty =  #{record.allocationQty},
                demand_amount = #{record.demandAmount},
                allocation_amount = #{record.allocationAmount},
            </set>
            where id = #{record.id}
        </foreach>

    </update>

    <delete id="deleteByParam" parameterType="java.lang.Integer">
        DELETE FROM allocation_flow
        where 1 = 1
        <if test="taskId != null">
            and task_id = #{taskId}
        </if>
    </delete>


    <select id="getAllocationSummary"  resultType="cn.nome.saas.allocation.model.allocation.AllocationDetail">
        select 1 as flag,count(distinct demand_shop_id) as inShop,count(distinct supply_shop_id) as outShop
        ,sum(allocation_qty) as skuCnt,sum(allocation_amount) as allocationAmount,sum(fee) as expressFee,sum(fee) / sum(allocation_amount) as feeRatio,created_at as date
        from allocation_flow
        where task_id = #{taskId}
        and match_flag = 1
        group by created_at
    </select>

    <select id="getAllocationDetail"  resultType="cn.nome.saas.allocation.model.allocation.AllocationDetail">
        select 0 as flag,id,demand_shop_id as inShopId,demand_shop_name as inShop,supply_shop_id as outShopId,supply_shop_name as outShop
        ,allocation_qty as skuCnt,allocation_amount as allocationAmount,demand_amount as demandAmount,fee as expressFee,rate as feeRatio,created_at as date,fail_reason as failFlag
        from allocation_flow
        where task_id = #{taskId}
        <if test="matchFlag != null">
            and match_flag = #{matchFlag}
        </if>
        <if test="keyword != null">
            and (
            supply_shop_name like  concat('%', #{keyword}, '%')
            or demand_shop_name  like  concat('%', #{keyword}, '%')
            )
        </if>
        <if test="shopIdList != null">
            and (demand_shop_id in (
                <foreach collection="shopIdList" separator="," item="shopId">#{shopId}
                </foreach>
            ) or supply_shop_id in (
                <foreach
                        collection="shopIdList" separator="," item="shopId">#{shopId}
                </foreach>
              )
            )
        </if>

        and allocation_amount > #{price}
        order by supply_shop_id,allocation_amount desc
        <if test="page != null">
            limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
        </if>
    </select>

</mapper>