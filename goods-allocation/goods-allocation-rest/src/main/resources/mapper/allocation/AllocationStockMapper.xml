<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.dao.allocation.AllocationStockDOMapper" >

    <resultMap id="ResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.AllocationStockDO" >
        <result column="task_id" property="taskId"  />
        <result column="allocation_date" property="allocationDate"  />
        <result column="shop_id" property="shopId"  />
        <result column="shop_name" property="shopName"  />
        <result column="shop_level" property="shopLevel"  />
        <result column="city_name" property="cityName"  />
        <result column="supply_shop_id" property="supplyShopId"  />
        <result column="supply_shop_name" property="supplyShopName"  />
        <result column="supply_shop_level" property="supplyShopLevel"  />
        <result column="supply_city_name" property="supplyCityName"  />
        <result column="mat_code" property="matCode"  />
        <result column="mat_name" property="matName"  />
        <result column="category_code" property="categoryCode"  />
        <result column="size_id" property="sizeId"  />
        <result column="size_code" property="sizeCode"  />
        <result column="size_name" property="sizeName"  />
        <result column="bar_code" property="batCode"  />
        <result column="quote_price" property="quotePrice"  />
        <result column="sum_sale_qty" property="sumSaleQty"  />
        <result column="avg_sale_qty" property="avgSaleQty"  />
        <result column="supply_avg_sale_qty" property="supplyAvgSaleQty"  />
        <result column="apply_stock_qty" property="applyStockQty"  />
        <result column="stock_qty" property="stockQty"  />
        <result column="path_stock_qty" property="pathStockQty"  />
        <result column="safe_stock_qty" property="safeStockQty"  />
        <result column="ideal_stock_qty" property="idealStockQty"  />
        <result column="demand_stock_qty" property="demandStockQty"  />
        <result column="supply_stock_qty" property="supplyStockQty"  />
        <result column="allocation_stock_qty" property="allocationStockQty"  />

    </resultMap>

    <resultMap id="TaskStoreDOResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.TaskStoreDO" >
        <result column="shopid" property="shopId" />
        <result column="shopname" property="shopName" />
        <result column="shopqty" property="shopQty" />
        <result column="quantity" property="commodityNum" />
        <result column="price" property="commodityPrice" />
    </resultMap>

    <resultMap id="TaskStoreDOV2ResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.TaskStoreDOV2" >
        <result column="shop_id" property="inShopId" />
        <result column="shop_name" property="inShopName" />
        <result column="supply_shop_id" property="outShopId" />
        <result column="supply_shop_name" property="outShopName" />
        <result column="quantity" property="commodityNum" />
        <result column="price" property="commodityPrice" />
    </resultMap>

    <resultMap id="TaskStoreCommodity" type="cn.nome.saas.allocation.model.allocation.TaskStoreCommodity" >
        <result column="inshop_id" property="inshopId" jdbcType="VARCHAR" />
        <result column="inshop_name" property="inshopName" jdbcType="VARCHAR" />
        <result column="outshop_id" property="outshopId" jdbcType="VARCHAR" />
        <result column="outshop_name" property="outshopName" jdbcType="VARCHAR" />
        <result column="size_id" property="sizeId" jdbcType="VARCHAR" />
        <result column="size_name" property="sizeName" jdbcType="VARCHAR" />
        <result column="mat_code" property="commodityId" jdbcType="VARCHAR" />
        <result column="mat_name" property="commodityName" jdbcType="VARCHAR" />
        <result column="quantity" property="commodityNum" jdbcType="INTEGER" />
    </resultMap>

    <resultMap id="TaskStoreCommodityV2" type="cn.nome.saas.allocation.model.allocation.TaskStoreCommodity" >
        <result column="inshop_id" property="inshopId" jdbcType="VARCHAR" />
        <result column="inshop_name" property="inshopName" jdbcType="VARCHAR" />
        <result column="outshop_id" property="outshopId" jdbcType="VARCHAR" />
        <result column="outshop_name" property="outshopName" jdbcType="VARCHAR" />
        <result column="size_id" property="sizeId" jdbcType="VARCHAR" />
        <result column="size_name" property="sizeName" jdbcType="VARCHAR" />
        <result column="mat_code" property="commodityId" jdbcType="VARCHAR" />
        <result column="mat_name" property="commodityName" jdbcType="VARCHAR" />
        <result column="quantity" property="commodityNum"  />
        <result column="avg_sale_qty" property="inAvgSaleQty"  />
        <result column="avg_sale_amt" property="inAvgSaleAmt"  />
        <result column="stock_qty" property="inStockQty"  />
        <result column="path_stock_qty" property="inPathStockQty"  />
        <result column="apply_stock_qty" property="inMoveQty"  />
        <result column="demand_stock_qty" property="inNeedStockQty"  />
        <result column="out_avg_sale_qty" property="outAvgSaleQty"  />
        <result column="out_avg_sale_amt" property="outAvgSaleAmt"  />
        <result column="supply_stock_qty" property="outStockQty"  />
        <result column="seasonName" property="seasonName"  />
        <result column="yearNo" property="yearNo"  />
    </resultMap>

    <resultMap id="allocationFragementalGoodsDOResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.AllocationFragementalGoodsDO" >
        <result column="task_id" property="taskId"  />
        <result column="shop_id" property="shopId"  />
        <result column="shop_name" property="shopName"  />
        <result column="shop_level" property="shopLevel"  />
        <result column="city_name" property="cityName"  />
        <result column="min_display_qty" property="minDisplayQty"  />
        <result column="mat_code" property="matCode"  />
        <result column="mat_name" property="matName"  />
        <result column="category_code" property="categoryCode"  />
        <result column="size_id" property="sizeId"  />
        <result column="size_code" property="sizeCode"  />
        <result column="size_name" property="sizeName"  />
        <result column="bar_code" property="batCode"  />
        <result column="quote_price" property="quotePrice"  />
        <result column="sum_sale_qty" property="sumSaleQty"  />
        <result column="avg_sale_qty" property="avgSaleQty"  />
        <result column="apply_stock_qty" property="applyStockQty"  />
        <result column="stock_qty" property="stockQty"  />
        <result column="path_stock_qty" property="pathStockQty"  />
        <result column="safe_stock_qty" property="safeStockQty"  />
        <result column="ideal_stock_qty" property="idealStockQty"  />
        <result column="demand_stock_qty" property="demandStockQty"  />
        <result column="supply_stock_qty" property="supplyStockQty"  />
        <result column="forbidden_flag" property="forbiddenFlag"  />
        <result column="allocation_stock_qty" property="alloctionStockQty"  />

    </resultMap>

    <resultMap id="allocationDemandGoodsDOResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.AllocationDemandGoodsDO" >
        <result column="shop_id" property="shopId"  />
        <result column="supply_shop_id" property="supplyShopId"  />
        <result column="shop_name" property="shopName"  />
        <result column="shop_level" property="shopLevel"  />
        <result column="city_name" property="cityName"  />
        <result column="min_display_qty" property="minDisplayQty"  />
        <result column="mat_code" property="matCode"  />
        <result column="mat_name" property="matName"  />
        <result column="category_code" property="categoryCode"  />
        <result column="size_id" property="sizeId"  />
        <result column="size_code" property="sizeCode"  />
        <result column="size_name" property="sizeName"  />
        <result column="bar_code" property="batCode"  />
        <result column="quote_price" property="quotePrice"  />
        <result column="sum_sale_qty" property="sumSaleQty"  />
        <result column="avg_sale_qty" property="avgSaleQty"  />
        <result column="apply_stock_qty" property="applyStockQty"  />
        <result column="stock_qty" property="stockQty"  />
        <result column="path_stock_qty" property="pathStockQty"  />
        <result column="safe_stock_qty" property="safeStockQty"  />
        <result column="ideal_stock_qty" property="idealStockQty"  />
        <result column="demand_stock_qty" property="demandStockQty"  />
        <result column="supply_stock_qty" property="supplyStockQty"  />
        <result column="forbidden_flag" property="forbiddenFlag"  />
        <result column="allocation_stock_qty" property="alloctionStockQty"  />
    </resultMap>




    <sql id="Base_Column_List" >
        task_id,allocation_date,shop_id,shop_name,shop_level,city_name,supply_shop_id,supply_shop_name,supply_shop_level
        ,supply_city_name,mat_code,mat_name,category_code,size_id,size_code
        ,size_name,bar_code,quote_price,sum_sale_qty,avg_sale_qty,supply_avg_sale_qty,apply_stock_qty,stock_qty
        ,path_stock_qty,safe_stock_qty,ideal_stock_qty,demand_stock_qty,supply_stock_qty,allocation_stock_qty
    </sql>

    <select id="selectAllocationStockByParam" resultMap="ResultMap" resultType="java.util.Map" >

        select
        <include refid="Base_Column_List" />
        from allocation_stock
        where 1 = 1
        <if test="taskId != null">
            and task_id = #{taskId}
        </if>
        <if test="taskIdList != null">
            <foreach collection="taskIdList" open="and task_id in ("  close=")" separator="," item="taskId">
                #{taskId}
            </foreach>
        </if>
        <if test="rejectShopId != null">
            and shop_id != #{rejectShopId}
        </if>
        <if test="supplyShopList != null">
            <foreach collection="supplyShopList" open="and supply_shop_id in ("  close=")" separator="," item="shopId">
                #{shopId}
            </foreach>
        </if>
        <if test="matCodeList != null">
            <foreach collection="matCodeList" open="and mat_code in ("  close=")" separator="," item="matCode">
                #{matCode}
            </foreach>
        </if>

    </select>

    <select id="getTaskStoreList" resultMap="TaskStoreDOResultMap" parameterType="java.util.Map">
        select shop_id as shopid,shop_name as shopname,count(distinct supply_shop_id) as shopqty,sum(demand_stock_qty) as quantity,sum(demand_stock_qty * quote_price) as price from allocation_stock
        where 1=1
        and task_id = #{taskId}
        <if test="demandShopList != null">
            <foreach collection="demandShopList" open="and shop_id in ("  close=")" separator="," item="shopId">
                #{shopId}
            </foreach>
        </if>
        <if test="matCodeList != null">
            <foreach collection="matCodeList" open="and mat_code in ("  close=")" separator="," item="matCode">
                #{matCode}
            </foreach>
        </if>
        group by shop_id,shop_name
        having price > #{priceThreshold} and quantity > #{quantityThreshold}
        order by price desc
    </select>

    <select id="getTaskStoreSupplyList" resultMap="TaskStoreDOResultMap" parameterType="java.util.Map">
        select supply_shop_id as shopid,supply_shop_name as shopname,count(distinct shop_id) as shopqty,sum(supply_stock_qty) as quantity,sum(supply_stock_qty * quote_price) as price from allocation_stock
        where 1=1
        and task_id = #{taskId}
        <if test="supplyShopList != null">
            <foreach collection="supplyShopList" open="and supply_shop_id in ("  close=")" separator="," item="shopId">
                #{shopId}
            </foreach>
        </if>
        <if test="matCodeList != null">
            <foreach collection="matCodeList" open="and mat_code in ("  close=")" separator="," item="matCode">
                #{matCode}
            </foreach>
        </if>
        group by supply_shop_id,supply_shop_name
        having price > #{priceThreshold} and quantity > #{quantityThreshold}
        order by price desc
    </select>



    <select id="getTaskAllocationStoreList" resultMap="TaskStoreDOV2ResultMap" parameterType="java.util.Map">
        select shop_id,shop_name,supply_shop_id,supply_shop_name,
        count(distinct supply_shop_id) as shopqty,sum(allocation_stock_qty) as quantity,sum(allocation_stock_qty * quote_price) as price
        from allocation_stock
        where 1=1
        and task_id = #{taskId}
        <if test="demandShopList != null">
            <foreach collection="demandShopList" open="and shop_id in ("  close=")" separator="," item="shopId">
                #{shopId}
            </foreach>
        </if>
        <if test="matCodeList != null">
            <foreach collection="matCodeList" open="and mat_code in ("  close=")" separator="," item="matCode">
                #{matCode}
            </foreach>
        </if>
        group by shop_id,shop_name,supply_shop_id,supply_shop_name
        having price > #{priceThreshold} and quantity > #{quantityThreshold}
        order by price desc
    </select>

    <select id="getTaskStoreCommodityCount" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(shop_id)
        from allocation_stock
        where 1=1
        and task_id = #{taskId}
        <if test="demandShopList != null">
            <foreach collection="demandShopList" open="and shop_id in ("  close=")" separator="," item="shopId">
                #{shopId}
            </foreach>
        </if>
        <if test="supplyShopList != null">
            <foreach collection="supplyShopList" open="and supply_shop_id in ("  close=")" separator="," item="shopId">
                #{shopId}
            </foreach>
        </if>
        <if test="matCodeList != null">
            <foreach collection="matCodeList" open="and mat_code in ("  close=")" separator="," item="matCode">
                #{matCode}
            </foreach>
        </if>

    </select>

    <select id="getTaskStoreCommodityList" resultMap="TaskStoreCommodity" parameterType="java.util.Map">
      select shop_id as inshop_id,shop_name as inshop_name,supply_shop_id as outshop_id,supply_shop_name as outshop_name,
        size_id,size_name,mat_code,mat_name,allocation_stock_qty as quantity
      from allocation_stock
      where 1=1
      and task_id = #{taskId}
      <if test="demandShopList != null">
        <foreach collection="demandShopList" open="and shop_id in ("  close=")" separator="," item="shopId">
            #{shopId}
        </foreach>
      </if>
        <if test="supplyShopList != null">
            <foreach collection="supplyShopList" open="and supply_shop_id in ("  close=")" separator="," item="shopId">
                #{shopId}
            </foreach>
        </if>
      <if test="matCodeList != null">
        <foreach collection="matCodeList" open="and mat_code in ("  close=")" separator="," item="matCode">
            #{matCode}
        </foreach>
      </if>
      <if test="page != null">
        limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
      </if>
    </select>

    <select id="getTaskStorePairCommodityList" resultMap="TaskStoreCommodityV2" parameterType="java.util.Map">
        select stock.shop_id as inshop_id,stock.shop_name as inshop_name,stock.supply_shop_id as outshop_id,stock.supply_shop_name as outshop_name,
        stock.size_id,stock.size_name,stock.mat_code,stock.mat_name,stock.allocation_stock_qty as quantity,
        stock.avg_sale_qty,(stock.avg_sale_qty * stock.quote_price) as avg_sale_amt,stock.stock_qty,
        stock.path_stock_qty,stock.apply_stock_qty,stock.demand_stock_qty,stock.supply_avg_sale_qty as out_avg_sale_qty,(stock.supply_avg_sale_qty * stock.quote_price) as out_avg_sale_amt,
        stock.supply_stock_qty,goods.seasonName,goods.yearNo
        from allocation_stock stock
        left join dws_dim_goods goods
        on stock.mat_code = goods.matcode
        where stock.task_id = ${taskId} and stock.shop_id = #{inshopId} and stock.supply_shop_id = #{outshopId}
        <if test="year != 'ALL'">
            and goods.yearno = #{year}
        </if>
        <if test="season != 'ALL'">
            and goods.seasonno = #{season}
        </if>
    </select>

    <select id="selectAllocationDetailList" parameterType="java.lang.Integer" resultType="cn.nome.saas.allocation.model.allocation.AllocationDetailRecord">
        select g.CategoryName as categoryName,g.MidCategoryName as midCategoryName,g.SmallCategoryName as smallCategoryName,g.MatName as matName,goods.QuotePrice as quotePrice,
        goods.YearNo as yearNo,goods.SeasonName as seasonName,g.MatCode as matCode,goods.ColorName as colorName,stock.size_id as sizeId,stock.size_name as sizeName,g.IsAllocationProhibited as isAllocationProhibited,
        stock.min_display_qty as minDisplayQty,
        stock.supply_shop_id as supplyShopId,stock.supply_shop_name as supplyShopName,stock.supply_forbidden_flag as supplyForbiddenFlag,
        stock.supply_sum_sale_qty as supply28SalesQty,stock.supply_avg_sale_qty as supplyAvgSalesQty,sg.stock_qty as supplyStockQty,(sg.stock_qty - stock.allocation_stock_qty) as supplyRemainStockQty,
        stock.shop_id as demandShopId,stock.shop_name as demandShopName,stock.demand_forbidden_flag as demandForbiddenFlag,stock.avg_sale_qty as demandAvgSalesQty,stock.sum_sale_qty as demand28SalesQty,stock.demand_stock_qty as demandQty,stock.stock_qty as demandSotckQty,
        stock.path_stock_qty as demandPathQty,stock.apply_stock_qty as demandApplyQty,stock.allocation_stock_qty as allocationQty,allocation_stock_qty * stock.quote_price as allocationAmount,(stock.stock_qty + stock.path_stock_qty + stock.apply_stock_qty) AS beforeStockQty,
        (stock.stock_qty + stock.path_stock_qty + stock.apply_stock_qty + stock.allocation_stock_qty) AS afterStockQty
        from allocation_stock stock
        left join dws_dim_goods goods
        on stock.mat_code = goods.matcode
        left join goods_info g
        on g.MatCode = stock.mat_code
        inner join allocation_task task
        on task.id = stock.task_id
        inner join ${tableName}  sg
        on stock.supply_shop_id = sg.shop_id and stock.mat_code = sg.mat_code and stock.size_id = sg.size_id
        where stock.task_id = ${taskId}
    </select>

    <select id="selectClothingAllocationDetailList" parameterType="java.lang.Integer" resultType="cn.nome.saas.allocation.model.allocation.AllocationDetailRecord">
        select g.CategoryName as categoryName,g.MidCategoryName as midCategoryName,g.SmallCategoryName as smallCategoryName,g.MatName as matName,goods.QuotePrice as quotePrice,
        goods.YearNo as yearNo,goods.SeasonName as seasonName,g.MatCode as matCode,goods.ColorName as colorName,stock.size_id as sizeId,stock.size_name as sizeName,g.IsAllocationProhibited as isAllocationProhibited,
        stock.min_display_qty as minDisplayQty,
        stock.supply_shop_id as supplyShopId,stock.supply_shop_name as supplyShopName,stock.supply_forbidden_flag as supplyForbiddenFlag,
        stock.supply_sum_sale_qty as supply28SalesQty,stock.supply_avg_sale_qty as supplyAvgSalesQty,sg.stock_qty as supplyStockQty,(sg.stock_qty - stock.allocation_stock_qty) as supplyRemainStockQty,
        stock.shop_id as demandShopId,stock.shop_name as demandShopName,stock.demand_forbidden_flag as demandForbiddenFlag,stock.avg_sale_qty as demandAvgSalesQty,stock.sum_sale_qty as demand28SalesQty,stock.demand_stock_qty as demandQty,stock.stock_qty as demandSotckQty,
        stock.path_stock_qty as demandPathQty,stock.apply_stock_qty as demandApplyQty,stock.allocation_stock_qty as allocationQty,allocation_stock_qty * stock.quote_price as allocationAmount,(stock.stock_qty + stock.path_stock_qty + stock.apply_stock_qty) AS beforeStockQty,
        (stock.stock_qty + stock.path_stock_qty + stock.apply_stock_qty + stock.allocation_stock_qty) AS afterStockQty
        from allocation_stock stock
        left join dws_dim_goods goods
        on stock.mat_code = goods.matcode
        left join goods_info g
        on g.MatCode = stock.mat_code
        inner join allocation_task_clothing task
        on task.id = stock.task_id
        inner join ${tableName}  sg
        on stock.supply_shop_id = sg.shop_id and stock.mat_code = sg.mat_code and stock.size_id = sg.size_id
        where stock.task_id = ${taskId}
    </select>

    <select id="selectFragmentalGoods" resultMap="allocationFragementalGoodsDOResultMap">
        select b.* from (
        select a.*,
        case when b.allocation_stock_qty is null then 0 else b.allocation_stock_qty end as allocation_stock_qty
        from ${tableName} a
        left join allocation_stock b
        on a.shop_id = b.supply_shop_id and a.mat_code = b.mat_code and a.size_id = b.size_id and b.task_id = ${taskId}
        where  a.supply_stock_qty>0 and a.forbidden_flag = 0 and a.invalid_skc_flag = 1
        <if test="supplyShopList != null">
            <foreach collection="supplyShopList" open="and a.shop_id in ("  close=")" separator="," item="shopId">
                #{shopId}
            </foreach>
        </if>
        ) b where b.supply_stock_qty-b.allocation_stock_qty > 0
    </select>

    <select id="selectDemandShopGoods" resultMap="allocationDemandGoodsDOResultMap">
        select a.*,b.supply_shop_id,
        case when b.allocation_stock_qty is null then 0 else b.allocation_stock_qty end as allocation_stock_qty
        from ${tableName} a
        inner join allocation_stock b
        on a.shop_id = b.shop_id and a.mat_code = b.mat_code and a.size_id = b.size_id and b.task_id = ${taskId}
        and a.demand_stock_qty>0 and a.forbidden_flag = 0
    </select>

    <select id="selectAllocationShop" resultType="java.lang.String">
        select distinct CONCAT(shop_id,":",supply_shop_id) from allocation_stock where task_id = ${taskId}
    </select>

    <select id="selectAllocationMatCode" resultType="java.lang.String">
        select distinct mat_code from allocation_stock where task_id = ${taskId}
    </select>

    <select id="selectAllocationStockList" resultType="cn.nome.saas.allocation.repository.entity.allocation.AllocationStockDO">
        select shop_id as shopId,supply_shop_id as supplyShopId,category_code as categoryCode,mat_code as matCode,size_id as sizeId,
        stock_qty as stockQty,path_stock_qty as pathStockQty,apply_stock_qty as applyStockQty,allocation_stock_qty as allocationStockQty,
        avg_sale_qty as avgSaleQty
        from allocation_stock
        where task_id = ${taskId}
    </select>


    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.Map" >

        insert into allocation_stock
        (
          task_id,
          allocation_date,
          shop_id,
          shop_name,
          shop_level,
          city_name,
          supply_shop_id,
          supply_shop_name,
          supply_shop_level,
          supply_city_name,
          mat_code,mat_name,
          category_code,
          size_id,
          size_code,
          size_name,
          bar_code,
          quote_price,
          sum_sale_qty,
          avg_sale_qty,
          supply_avg_sale_qty,
          supply_sum_sale_qty,
          apply_stock_qty,
          stock_qty,
          path_stock_qty,
          safe_stock_qty,
          ideal_stock_qty,
          demand_stock_qty,
          supply_stock_qty,
          allocation_stock_qty,
          min_display_qty,
          demand_forbidden_flag,
          supply_forbidden_flag,
          demand_days,
          supply_days
        )
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.taskId},#{item.allocationDate},#{item.shopId},#{item.shopName},#{item.shopLevel},#{item.cityName},#{item.supplyShopId},#{item.supplyShopName},#{item.supplyShopLevel},
            #{item.supplyCityName},#{item.matCode},#{item.matName},#{item.categoryCode},#{item.sizeId},#{item.sizeCode},#{item.sizeName},
            #{item.batCode},#{item.quotePrice},#{item.sumSaleQty},#{item.avgSaleQty},#{item.supplyAvgSaleQty},#{item.supplySumSaleQty},#{item.applyStockQty},#{item.stockQty},#{item.pathStockQty},
            #{item.safeStockQty},#{item.idealStockQty},#{item.demandStockQty},#{item.supplyStockQty},#{item.allocationStockQty},
            #{item.minDisplayQty},#{item.demandForbiddenFlag},#{item.supplyForbiddenFlag},#{item.demandDays},#{item.supplyDays}
            )

        </foreach>

    </insert>

    <delete id="deleteByParam" parameterType="java.util.Map">
        DELETE FROM allocation_stock
        where 1 = 1
        <if test="taskId != null">
            and task_id = #{taskId}
        </if>
        <if test="allocationDate != null">
            and allocation_date = #{allocationDate}
        </if>
    </delete>


</mapper>