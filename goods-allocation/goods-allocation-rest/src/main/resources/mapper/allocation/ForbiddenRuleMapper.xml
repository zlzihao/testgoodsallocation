<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nome.saas.allocation.repository.dao.allocation.ForbiddenRuleDOMapper" >


    <resultMap id="ForbiddenRuleResultMap" type="cn.nome.saas.allocation.repository.entity.allocation.ForbiddenRuleDO" >
        <id property="id" column="id"/>
        <result column="name" property="name"  />
        <result column="start_date" property="startDate" />
        <result column="end_date" property="endDate"  />
        <result column="type" property="type"  />
        <result column="status" property="status" />
        <result column="sync_id" property="syncId" />
        <result column="created_at" property="createdAt" />
        <result column="created_by" property="createdBy"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="updated_by" property="updatedBy"/>
    </resultMap>

    <select id="getValidRuleIds" resultType="java.lang.Integer">
        select id from forbidden_rule where type = #{type} and status = #{status} and end_date >= #{endDate}
    </select>

    <select id="getRecentlyChangedRuleIds" resultType="java.lang.Integer">
        select id from forbidden_rule where type = #{type} and status = #{status} and end_date >= #{endDate} and updated_at >= #{updatedAt}
    </select>

    <select id="getForbiddenRuleCount" resultType="java.lang.Integer">
        select count(*) from forbidden_rule
        where 1=1
        <if test="ruleName != null" >
            and name like  concat('%', #{ruleName}, '%')
        </if>
        <if test="operator != null" >
            and created_by = #{operator}
        </if>
        <if test="status != null" >
            and status in(
            <foreach collection="status" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="type != null" >
            and type = #{type}
        </if>
    </select>

    <select id="selectFrobiddenRuleByPage" resultMap="ForbiddenRuleResultMap">
        select id,name,start_date,end_date,type,status, sync_id, created_at,created_by,updated_at,updated_by from forbidden_rule
        where 1=1
        <if test="ruleName != null" >
            and name like  concat('%', #{ruleName}, '%')
        </if>
        <if test="operator != null" >
            and created_by = #{operator}
        </if>
        <if test="type != null" >
            and type = #{type}
        </if>
        <if test="status != null" >
            and status in(
                <foreach collection="status" item="item" index="index" separator=",">
                    #{item}
                </foreach>
            )
        </if>

        order by updated_at desc
        limit #{offset,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}

    </select>


    <select id="selectByParam" resultMap="ForbiddenRuleResultMap" parameterType="cn.nome.saas.allocation.repository.entity.allocation.ForbiddenRuleDO">
        select  id,name,start_date,end_date,type,status,sync_id, created_at,created_by,updated_at,updated_by
        from forbidden_rule
        where 1= 1
        <if test="name != null" >
          and name = #{name}
        </if>
        <if test="type != null" >
         and type = #{type}
        </if>
    </select>


    <insert id="insertSelective"  useGeneratedKeys="true" keyProperty="id"  parameterType="cn.nome.saas.allocation.repository.entity.allocation.ForbiddenRuleDO" >
        insert into forbidden_rule
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="name != null" >
                name,
            </if>
            <if test="startDate != null" >
                start_date,
            </if>
            <if test="endDate != null" >
                end_date,
            </if>
            <if test="type != null" >
                type,
            </if>
            <if test="status != null" >
                status,
            </if>
            <if test="syncId != null" >
                sync_id,
            </if>
            <if test="createdAt != null" >
                created_at,
            </if>
            <if test="createdBy != null" >
                created_by,
            </if>
            <if test="updatedAt != null" >
                updated_at,
            </if>
            <if test="updatedBy != null" >
                updated_by
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="name != null" >
                #{name},
            </if>
            <if test="startDate != null" >
                #{startDate},
            </if>
            <if test="endDate != null" >
                #{endDate},
            </if>
            <if test="type != null" >
                #{type},
            </if>
            <if test="status != null" >
                #{status},
            </if>
            <if test="syncId != null" >
                #{syncId},
            </if>
            <if test="createdAt != null" >
                #{createdAt},
            </if>
            <if test="createdBy != null" >
                #{createdBy},
            </if>
            <if test="updatedAt != null" >
                #{updatedAt},
            </if>
            <if test="updatedBy != null" >
                #{updatedBy},
            </if>
        </trim>
    </insert>

    <update id="updateById" parameterType="cn.nome.saas.allocation.repository.entity.allocation.ForbiddenRuleDO">
        update forbidden_rule
        <set>
            <if test="name != null" >
                name = #{name},
            </if>
            <if test="startDate != null" >
                start_date = #{startDate},
            </if>
            <if test="endDate != null" >
                end_date = #{endDate},
            </if>
            <if test="updatedAt != null" >
                updated_at = #{updatedAt},
            </if>
            <if test="updatedBy != null" >
                updated_by = #{updatedBy}
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from forbidden_rule where id = #{ruleId}
    </delete>

    <select id="selectById" parameterType="java.lang.Integer" resultMap="ForbiddenRuleResultMap" >
        select id,name,start_date,end_date,type,status,sync_id, created_at,created_by,updated_at,updated_by from forbidden_rule
        where id = #{ruleId}
    </select>

    <select id="selectBySyncId" parameterType="java.lang.Integer" resultMap="ForbiddenRuleResultMap" >
        select id,name,start_date,end_date,type,status,sync_id, created_at,created_by,updated_at,updated_by from forbidden_rule
        where sync_id = #{syncId}
    </select>

    <select id="checkRuleIsNew" parameterType="java.lang.Integer" resultType="java.lang.Integer" >
        select  COUNT(1) AS cnt from forbidden_rule
        where id = #{id} and updated_at >=DATE_SUB(NOW(),INTERVAL 60 MINUTE)
    </select>


    <select id="getRegioneNameList" resultType="java.lang.String">
	  <![CDATA[
			SELECT DISTINCT(GoodsArea) as GoodsArea from shop_info where GoodsArea is not null
	  ]]>
	</select>
    <select id="getProvinceNameList" resultType="java.lang.String">
	  <![CDATA[
			SELECT DISTINCT(ProvinceName) as ProvinceName from dws_dim_shop where ProvinceName is not null
	  ]]>
	</select>
    <select id="getCityNameList" resultType="java.lang.String">
	  <![CDATA[
			SELECT DISTINCT(CityName) as CityName from dws_dim_shop where CityName is not null
	  ]]>
	</select>
    <select id="getShopCodeList" resultType="cn.nome.saas.allocation.repository.entity.allocation.DwsDimShopDO">
	  <![CDATA[
			SELECT ShopID, ShopName from dws_dim_shop where ShopCode is not null
	  ]]>
	</select>

    <select id="getCategoryNameList" resultType="String">
		SELECT DISTINCT CategoryName FROM goods_info WHERE  CategoryName IS NOT NULL
	</select>

    <select id="getMidCategoryNameList" resultType="String">
		SELECT DISTINCT MidCategoryName FROM goods_info WHERE MidCategoryName IS NOT NULL
	</select>

    <select id="getSmallCategoryNameList" resultType="String">
		SELECT DISTINCT SmallCategoryName FROM goods_info WHERE  SmallCategoryName IS NOT NULL
	</select>
    <select id="getShopSaleLvList" resultType="String">
		SELECT DISTINCT ShopLevel FROM shop_info WHERE  ShopLevel IS NOT NULL
	</select>
    <select id="getShopDisplayLvList" resultType="String">
		SELECT DISTINCT CommodityLevel FROM shop_info WHERE  CommodityLevel IS NOT NULL
	</select>

    <select id="getShopBySaleDisplayLv" resultType="cn.nome.saas.allocation.model.issue.ShopInfoData">
        <if test="shopLevels != null" >
            SELECT ShopID, ShopCode FROM shop_info
            where
            ShopLevel in (
            <foreach collection="shopLevels" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="displayLevels != null" >
            <if test="shopLevels != null" >
                union
            </if>
            SELECT ShopID, ShopCode FROM shop_info
            where
            DisplayLevel in (
            <foreach collection="displayLevels" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="regions != null" >
            <if test="shopLevels != null or displayLevels != null" >
                union
            </if>
            SELECT ShopID, ShopCode FROM shop_info
            where
            GoodsArea in (
            <foreach collection="regions" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="attrFirVals != null" >
            <if test="shopLevels != null or displayLevels != null or regions != null" >
                union
            </if>
            SELECT ShopID, ShopCode FROM shop_info
            where
            AttrFirVal in (
            <foreach collection="attrFirVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="attrSecVals != null" >
            <if test="shopLevels != null or displayLevels != null or regions != null or attrFirVals != null" >
                union
            </if>
            SELECT ShopID, ShopCode FROM shop_info
            where
            AttrSecVal in (
            <foreach collection="attrSecVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="attrThiVals != null" >
            <if test="shopLevels != null or displayLevels != null or regions != null or attrFirVals != null or attrSecVals != null" >
                union
            </if>
            SELECT ShopID, ShopCode FROM shop_info
            where
            AttrThiVal in (
            <foreach collection="attrThiVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="attrFourVals != null" >
            <if test="shopLevels != null or displayLevels != null or regions != null or attrFirVals != null or attrSecVals != null or attrThiVals != null" >
                union
            </if>
            SELECT ShopID, ShopCode FROM shop_info
            where
            AttrFourVal in (
            <foreach collection="attrFourVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="attrFifVals != null" >
            <if test="shopLevels != null or displayLevels != null or regions != null or attrFirVals != null or attrSecVals != null or attrThiVals != null or attrFourVals != null" >
                union
            </if>
            SELECT ShopID, ShopCode FROM shop_info
            where
            AttrFifVal in (
            <foreach collection="attrFifVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="shopStatus != null" >
            <if test="shopLevels != null or displayLevels != null or regions != null or attrFirVals != null or attrSecVals != null or attrThiVals != null or attrFourVals != null or attrFifVals != null" >
                union
            </if>
            SELECT ShopID, ShopCode FROM shop_info
            where
            Status in (
            <foreach collection="shopStatus" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
    </select>

    <select id="getShopBySaleDisplayLvIn" resultType="cn.nome.saas.allocation.model.issue.ShopInfoData">

            SELECT ShopID, ShopCode FROM shop_info
            where 1=1
        <if test="shopLevels != null" >
            and ShopLevel in (
            <foreach collection="shopLevels" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="displayLevels != null" >
            and DisplayLevel in (
            <foreach collection="displayLevels" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="regions != null" >
            and GoodsArea in (
            <foreach collection="regions" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="attrFirVals != null" >
            and AttrFirVal in (
            <foreach collection="attrFirVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="attrSecVals != null" >
            and AttrSecVal in (
            <foreach collection="attrSecVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="attrThiVals != null" >
            and AttrThiVal in (
            <foreach collection="attrThiVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="attrFourVals != null" >
            and AttrFourVal in (
            <foreach collection="attrFourVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test="attrFifVals != null" >
            and AttrFifVal in (
            <foreach collection="attrFifVals" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="shopStatus != null" >
            and Status in (
            <foreach collection="shopStatus" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
    </select>


    <select id="getSkcByCategory" resultType="java.lang.String">
        <if test="bigCategoryNames != null" >
            SELECT MatCode FROM goods_info
            where
            CategoryName in (
            <foreach collection="bigCategoryNames" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="midCategoryNames != null" >
            <if test="bigCategoryNames != null" >
                union
            </if>
            SELECT MatCode FROM goods_info
            where
            MidCategoryName in (
            <foreach collection="midCategoryNames" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="smallCategoryNames != null" >
            <if test="bigCategoryNames != null or midCategoryNames != null ">
                union
            </if>
            SELECT MatCode FROM goods_info
            where
            SmallCategoryName in (
            <foreach collection="smallCategoryNames" item="item" index="index" separator=",">
                #{item}
            </foreach>
            )
        </if>
    </select>

    <select id="getAdmin" resultType="cn.nome.saas.allocation.repository.entity.allocation.UserAdminDO">
		SELECT UserId userId,userName FROM `user_admin` WHERE UserId = #{userId}
	</select>



</mapper>